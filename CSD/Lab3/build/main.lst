ARM GAS  /tmp/ccpnyFe8.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.file 1 "Core/Src/main.c"
  20              		.section	.text.MX_GPIO_Init,"ax",%progbits
  21              		.align	1
  22              		.syntax unified
  23              		.thumb
  24              		.thumb_func
  26              	MX_GPIO_Init:
  27              	.LFB141:
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****   ******************************************************************************
   4:Core/Src/main.c ****   * @file           : main.c
   5:Core/Src/main.c ****   * @brief          : Main program body
   6:Core/Src/main.c ****   ******************************************************************************
   7:Core/Src/main.c ****   * @attention
   8:Core/Src/main.c ****   *
   9:Core/Src/main.c ****   * Copyright (c) 2024 STMicroelectronics.
  10:Core/Src/main.c ****   * All rights reserved.
  11:Core/Src/main.c ****   *
  12:Core/Src/main.c ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Core/Src/main.c ****   * in the root directory of this software component.
  14:Core/Src/main.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Core/Src/main.c ****   *
  16:Core/Src/main.c ****   ******************************************************************************
  17:Core/Src/main.c ****   */
  18:Core/Src/main.c **** /* USER CODE END Header */
  19:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  20:Core/Src/main.c **** #include "main.h"
  21:Core/Src/main.c **** 
  22:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  23:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  24:Core/Src/main.c **** 
  25:Core/Src/main.c **** /* USER CODE END Includes */
  26:Core/Src/main.c **** 
  27:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
  28:Core/Src/main.c **** /* USER CODE BEGIN PTD */
  29:Core/Src/main.c **** 
  30:Core/Src/main.c **** /* USER CODE END PTD */
  31:Core/Src/main.c **** 
ARM GAS  /tmp/ccpnyFe8.s 			page 2


  32:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
  33:Core/Src/main.c **** /* USER CODE BEGIN PD */
  34:Core/Src/main.c **** 
  35:Core/Src/main.c **** /* USER CODE END PD */
  36:Core/Src/main.c **** 
  37:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
  38:Core/Src/main.c **** /* USER CODE BEGIN PM */
  39:Core/Src/main.c **** 
  40:Core/Src/main.c **** /* USER CODE END PM */
  41:Core/Src/main.c **** 
  42:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
  43:Core/Src/main.c **** TIM_HandleTypeDef htim4;
  44:Core/Src/main.c **** TIM_HandleTypeDef htim6;
  45:Core/Src/main.c **** 
  46:Core/Src/main.c **** UART_HandleTypeDef huart6;
  47:Core/Src/main.c **** 
  48:Core/Src/main.c **** /* USER CODE BEGIN PV */
  49:Core/Src/main.c **** 
  50:Core/Src/main.c **** /* USER CODE END PV */
  51:Core/Src/main.c **** 
  52:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
  53:Core/Src/main.c **** void SystemClock_Config(void);
  54:Core/Src/main.c **** static void MX_GPIO_Init(void);
  55:Core/Src/main.c **** static void MX_TIM4_Init(void);
  56:Core/Src/main.c **** static void MX_USART6_UART_Init(void);
  57:Core/Src/main.c **** static void MX_TIM6_Init(void);
  58:Core/Src/main.c **** /* USER CODE BEGIN PFP */
  59:Core/Src/main.c **** 
  60:Core/Src/main.c **** /* USER CODE END PFP */
  61:Core/Src/main.c **** 
  62:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
  63:Core/Src/main.c **** /* USER CODE BEGIN 0 */
  64:Core/Src/main.c **** struct Mode
  65:Core/Src/main.c **** {
  66:Core/Src/main.c ****   int greenPulse;
  67:Core/Src/main.c ****   int greenMod;
  68:Core/Src/main.c ****   int yellowPulse;
  69:Core/Src/main.c ****   int yellowMod;
  70:Core/Src/main.c ****   int redPulse;
  71:Core/Src/main.c ****   int redMod;
  72:Core/Src/main.c **** };
  73:Core/Src/main.c **** 
  74:Core/Src/main.c **** int mode_index = 0;
  75:Core/Src/main.c **** struct Mode modes[] = {
  76:Core/Src/main.c ****   {
  77:Core/Src/main.c ****     0, 200,
  78:Core/Src/main.c ****     100, 200,
  79:Core/Src/main.c ****     0, 0
  80:Core/Src/main.c ****   },
  81:Core/Src/main.c ****   {
  82:Core/Src/main.c ****     0, 400,
  83:Core/Src/main.c ****     0, 0,
  84:Core/Src/main.c ****     200, 400
  85:Core/Src/main.c ****   },
  86:Core/Src/main.c ****   {
  87:Core/Src/main.c ****     0, 600,
  88:Core/Src/main.c ****     200, 600,
ARM GAS  /tmp/ccpnyFe8.s 			page 3


  89:Core/Src/main.c ****     400, 600
  90:Core/Src/main.c ****   },
  91:Core/Src/main.c ****   {
  92:Core/Src/main.c ****     0, 200,
  93:Core/Src/main.c ****     0, 200,
  94:Core/Src/main.c ****     100, 200
  95:Core/Src/main.c ****   },
  96:Core/Src/main.c ****   {}
  97:Core/Src/main.c **** };
  98:Core/Src/main.c **** size_t modes_length = sizeof(modes) / sizeof(modes[0]);
  99:Core/Src/main.c **** 
 100:Core/Src/main.c **** struct Mode current, custom;
 101:Core/Src/main.c **** 
 102:Core/Src/main.c **** int speed = 5;
 103:Core/Src/main.c **** 
 104:Core/Src/main.c **** void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 105:Core/Src/main.c ****   if (htim->Instance == TIM6) {
 106:Core/Src/main.c ****     current.greenPulse = (current.greenPulse + speed) % current.greenMod;
 107:Core/Src/main.c ****     current.yellowPulse = (current.yellowPulse + speed) % current.yellowMod;
 108:Core/Src/main.c ****     current.redPulse = (current.redPulse + speed) % current.redMod;
 109:Core/Src/main.c **** 
 110:Core/Src/main.c ****     if (current.greenPulse > 200) {
 111:Core/Src/main.c ****       htim4.Instance->CCR2 = 0;
 112:Core/Src/main.c ****     } else {
 113:Core/Src/main.c ****       htim4.Instance->CCR2 = current.greenPulse <= 100 ? current.greenPulse : 200 - current.greenPu
 114:Core/Src/main.c ****     }
 115:Core/Src/main.c ****     if (current.yellowPulse > 200) {
 116:Core/Src/main.c ****       htim4.Instance->CCR3 = 0;
 117:Core/Src/main.c ****     } else {
 118:Core/Src/main.c ****       htim4.Instance->CCR3 = current.yellowPulse <= 100 ? current.yellowPulse : 200 - current.yello
 119:Core/Src/main.c ****     }
 120:Core/Src/main.c ****     if (current.redPulse > 200) {
 121:Core/Src/main.c ****       htim4.Instance->CCR4 = 0;
 122:Core/Src/main.c ****     } else {
 123:Core/Src/main.c ****       htim4.Instance->CCR4 = current.redPulse <= 100 ? current.redPulse : 200 - current.redPulse;
 124:Core/Src/main.c ****     }
 125:Core/Src/main.c ****   }
 126:Core/Src/main.c **** }
 127:Core/Src/main.c **** 
 128:Core/Src/main.c **** _Bool is_main_menu = 1;
 129:Core/Src/main.c **** int custom_mode_parameter_num = 0;
 130:Core/Src/main.c **** 
 131:Core/Src/main.c **** void Handler(uint8_t *buf) {
 132:Core/Src/main.c ****   int32_t receivedNumber = 0;
 133:Core/Src/main.c **** 
 134:Core/Src/main.c ****   if (strlen(buf) == 0) {
 135:Core/Src/main.c ****     is_main_menu = 0;
 136:Core/Src/main.c ****     custom_mode_parameter_num = 0;
 137:Core/Src/main.c ****     sprintf(buf, "Enter green start phase: ");
 138:Core/Src/main.c ****     HAL_UART_Transmit(&huart6, (uint8_t*)buf, strlen(buf), HAL_MAX_DELAY);
 139:Core/Src/main.c ****     return;
 140:Core/Src/main.c ****   }
 141:Core/Src/main.c ****   receivedNumber = atoi((char*)buf);
 142:Core/Src/main.c ****   if (!is_main_menu) {
 143:Core/Src/main.c ****     switch (custom_mode_parameter_num)
 144:Core/Src/main.c ****     {
 145:Core/Src/main.c ****     case 0:
ARM GAS  /tmp/ccpnyFe8.s 			page 4


 146:Core/Src/main.c ****       current.greenPulse = receivedNumber;
 147:Core/Src/main.c ****       sprintf(buf, "Enter green mod: ");
 148:Core/Src/main.c ****       HAL_UART_Transmit(&huart6, (uint8_t*)buf, strlen(buf), HAL_MAX_DELAY);
 149:Core/Src/main.c ****       break;
 150:Core/Src/main.c ****     case 1:
 151:Core/Src/main.c ****       current.greenMod = receivedNumber;
 152:Core/Src/main.c ****       sprintf(buf, "Enter yellow start phase: ");
 153:Core/Src/main.c ****       HAL_UART_Transmit(&huart6, (uint8_t*)buf, strlen(buf), HAL_MAX_DELAY);
 154:Core/Src/main.c ****       break;
 155:Core/Src/main.c ****     case 2:
 156:Core/Src/main.c ****       current.yellowPulse = receivedNumber;
 157:Core/Src/main.c ****       sprintf(buf, "Enter yellow mod: ");
 158:Core/Src/main.c ****       HAL_UART_Transmit(&huart6, (uint8_t*)buf, strlen(buf), HAL_MAX_DELAY);
 159:Core/Src/main.c ****       break;
 160:Core/Src/main.c ****     case 3:
 161:Core/Src/main.c ****       current.yellowMod = receivedNumber;
 162:Core/Src/main.c ****       sprintf(buf, "Enter red start phase: ");
 163:Core/Src/main.c ****       HAL_UART_Transmit(&huart6, (uint8_t*)buf, strlen(buf), HAL_MAX_DELAY);
 164:Core/Src/main.c ****       break;
 165:Core/Src/main.c ****     case 4:
 166:Core/Src/main.c ****       current.redPulse = receivedNumber;
 167:Core/Src/main.c ****       sprintf(buf, "Enter red mod: ");
 168:Core/Src/main.c ****       HAL_UART_Transmit(&huart6, (uint8_t*)buf, strlen(buf), HAL_MAX_DELAY);
 169:Core/Src/main.c ****       break;
 170:Core/Src/main.c ****     case 5:
 171:Core/Src/main.c ****       current.redMod = receivedNumber;
 172:Core/Src/main.c ****       sprintf(buf, "Custom mode:\nGreen: %d, %d\nYellow: %d, %d\nRed: %d, %d\n",
 173:Core/Src/main.c ****         current.greenPulse, current.greenMod, current.yellowPulse, current.yellowMod,
 174:Core/Src/main.c ****         current.redPulse, current.redMod);
 175:Core/Src/main.c ****       HAL_UART_Transmit(&huart6, (uint8_t*)buf, strlen(buf), HAL_MAX_DELAY);
 176:Core/Src/main.c ****       custom_mode_parameter_num = 0;
 177:Core/Src/main.c ****       is_main_menu = 1;
 178:Core/Src/main.c ****       return;
 179:Core/Src/main.c ****     }
 180:Core/Src/main.c ****     custom_mode_parameter_num++;
 181:Core/Src/main.c ****     return;
 182:Core/Src/main.c ****   }
 183:Core/Src/main.c **** 
 184:Core/Src/main.c ****   switch (receivedNumber)
 185:Core/Src/main.c ****   {
 186:Core/Src/main.c ****   case 1:
 187:Core/Src/main.c ****     mode_index = (mode_index + 1) % modes_length;
 188:Core/Src/main.c ****     current = modes[mode_index];
 189:Core/Src/main.c ****     sprintf(buf, "Current mode: %d\n", mode_index + 1);
 190:Core/Src/main.c ****     HAL_UART_Transmit(&huart6, (uint8_t*)buf, strlen(buf), HAL_MAX_DELAY);
 191:Core/Src/main.c ****     break;
 192:Core/Src/main.c ****   case 2:
 193:Core/Src/main.c ****     mode_index = (modes_length + mode_index - 1) % modes_length;
 194:Core/Src/main.c ****     sprintf(buf, "Current mode: %d\n", mode_index + 1);
 195:Core/Src/main.c ****     HAL_UART_Transmit(&huart6, (uint8_t*)buf, strlen(buf), HAL_MAX_DELAY);
 196:Core/Src/main.c ****     current = modes[mode_index];
 197:Core/Src/main.c ****     break;
 198:Core/Src/main.c ****   case 3:
 199:Core/Src/main.c ****     speed++;
 200:Core/Src/main.c ****     if (speed > 10) {
 201:Core/Src/main.c ****       speed = 10;
 202:Core/Src/main.c ****     }
ARM GAS  /tmp/ccpnyFe8.s 			page 5


 203:Core/Src/main.c ****     sprintf(buf, "Current speed: %d\n", speed);
 204:Core/Src/main.c ****     HAL_UART_Transmit(&huart6, (uint8_t*)buf, strlen(buf), HAL_MAX_DELAY);
 205:Core/Src/main.c ****     break;
 206:Core/Src/main.c ****   case 4:
 207:Core/Src/main.c ****     speed--;
 208:Core/Src/main.c ****     if (speed < 1) {
 209:Core/Src/main.c ****       speed = 1;
 210:Core/Src/main.c ****     }
 211:Core/Src/main.c ****     sprintf(buf, "Current speed: %d\n", speed);
 212:Core/Src/main.c ****     HAL_UART_Transmit(&huart6, (uint8_t*)buf, strlen(buf), HAL_MAX_DELAY);
 213:Core/Src/main.c ****     break;
 214:Core/Src/main.c ****   case 5:
 215:Core/Src/main.c ****     sprintf(buf, "Custom mode:\nGreen: pulse = %d, mod = %d\nYellow: pulse = %d, mod = %d\nRed: pul
 216:Core/Src/main.c ****       custom.greenPulse, custom.greenMod, custom.yellowPulse, custom.yellowMod, custom.redPulse, cu
 217:Core/Src/main.c ****     HAL_UART_Transmit(&huart6, (uint8_t*)buf, strlen(buf), HAL_MAX_DELAY);
 218:Core/Src/main.c ****     break;
 219:Core/Src/main.c ****   default:
 220:Core/Src/main.c ****     sprintf(buf, "Unknown parameter\n");
 221:Core/Src/main.c ****     HAL_UART_Transmit(&huart6, (uint8_t*)buf, strlen(buf), HAL_MAX_DELAY);
 222:Core/Src/main.c ****     break;
 223:Core/Src/main.c ****   }
 224:Core/Src/main.c **** }
 225:Core/Src/main.c **** 
 226:Core/Src/main.c **** 
 227:Core/Src/main.c **** #define BUFFER_SIZE 150
 228:Core/Src/main.c **** 
 229:Core/Src/main.c **** uint8_t receivedData[BUFFER_SIZE];
 230:Core/Src/main.c **** uint8_t byte = 0;
 231:Core/Src/main.c **** uint16_t idx = 0;
 232:Core/Src/main.c **** /* USER CODE END 0 */
 233:Core/Src/main.c **** 
 234:Core/Src/main.c **** /**
 235:Core/Src/main.c ****   * @brief  The application entry point.
 236:Core/Src/main.c ****   * @retval int
 237:Core/Src/main.c ****   */
 238:Core/Src/main.c **** int main(void)
 239:Core/Src/main.c **** {
 240:Core/Src/main.c **** 
 241:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
 242:Core/Src/main.c **** 
 243:Core/Src/main.c ****   /* USER CODE END 1 */
 244:Core/Src/main.c **** 
 245:Core/Src/main.c ****   /* MCU Configuration--------------------------------------------------------*/
 246:Core/Src/main.c **** 
 247:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 248:Core/Src/main.c ****   HAL_Init();
 249:Core/Src/main.c **** 
 250:Core/Src/main.c ****   /* USER CODE BEGIN Init */
 251:Core/Src/main.c **** 
 252:Core/Src/main.c ****   /* USER CODE END Init */
 253:Core/Src/main.c **** 
 254:Core/Src/main.c ****   /* Configure the system clock */
 255:Core/Src/main.c ****   SystemClock_Config();
 256:Core/Src/main.c **** 
 257:Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
 258:Core/Src/main.c **** 
 259:Core/Src/main.c ****   /* USER CODE END SysInit */
ARM GAS  /tmp/ccpnyFe8.s 			page 6


 260:Core/Src/main.c **** 
 261:Core/Src/main.c ****   /* Initialize all configured peripherals */
 262:Core/Src/main.c ****   MX_GPIO_Init();
 263:Core/Src/main.c ****   MX_TIM4_Init();
 264:Core/Src/main.c ****   MX_USART6_UART_Init();
 265:Core/Src/main.c ****   MX_TIM6_Init();
 266:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 267:Core/Src/main.c **** 
 268:Core/Src/main.c ****   /* USER CODE END 2 */
 269:Core/Src/main.c **** 
 270:Core/Src/main.c ****   /* Infinite loop */
 271:Core/Src/main.c ****   /* USER CODE BEGIN WHILE */
 272:Core/Src/main.c ****   HAL_TIM_Base_Start_IT(&htim6);
 273:Core/Src/main.c ****   HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 274:Core/Src/main.c ****   HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 275:Core/Src/main.c ****   HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 276:Core/Src/main.c **** 
 277:Core/Src/main.c ****   current = modes[mode_index];
 278:Core/Src/main.c ****   custom = modes[modes_length - 1];
 279:Core/Src/main.c **** 
 280:Core/Src/main.c ****   while (1)
 281:Core/Src/main.c ****   {
 282:Core/Src/main.c ****     if (HAL_UART_Receive(&huart6, &byte, 1, HAL_MAX_DELAY) == HAL_OK) {
 283:Core/Src/main.c ****       if (byte == '\n' || byte == '\r') {
 284:Core/Src/main.c ****           receivedData[idx] = '\0';
 285:Core/Src/main.c ****           
 286:Core/Src/main.c ****           Handler(receivedData);
 287:Core/Src/main.c **** 
 288:Core/Src/main.c ****           idx = 0;
 289:Core/Src/main.c ****           memset(receivedData, 0, BUFFER_SIZE);
 290:Core/Src/main.c ****       } else if (idx < BUFFER_SIZE - 1) {
 291:Core/Src/main.c ****           receivedData[idx++] = byte;
 292:Core/Src/main.c ****       }
 293:Core/Src/main.c ****     }
 294:Core/Src/main.c ****     /* USER CODE END WHILE */
 295:Core/Src/main.c **** 
 296:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 297:Core/Src/main.c ****   }
 298:Core/Src/main.c ****   /* USER CODE END 3 */
 299:Core/Src/main.c **** }
 300:Core/Src/main.c **** 
 301:Core/Src/main.c **** /**
 302:Core/Src/main.c ****   * @brief System Clock Configuration
 303:Core/Src/main.c ****   * @retval None
 304:Core/Src/main.c ****   */
 305:Core/Src/main.c **** void SystemClock_Config(void)
 306:Core/Src/main.c **** {
 307:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 308:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 309:Core/Src/main.c **** 
 310:Core/Src/main.c ****   /** Configure the main internal regulator output voltage
 311:Core/Src/main.c ****   */
 312:Core/Src/main.c ****   __HAL_RCC_PWR_CLK_ENABLE();
 313:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 314:Core/Src/main.c **** 
 315:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 316:Core/Src/main.c ****   * in the RCC_OscInitTypeDef structure.
ARM GAS  /tmp/ccpnyFe8.s 			page 7


 317:Core/Src/main.c ****   */
 318:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 319:Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 320:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 321:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 322:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 15;
 323:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 108;
 324:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 325:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 4;
 326:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 327:Core/Src/main.c ****   {
 328:Core/Src/main.c ****     Error_Handler();
 329:Core/Src/main.c ****   }
 330:Core/Src/main.c **** 
 331:Core/Src/main.c ****   /** Activate the Over-Drive mode
 332:Core/Src/main.c ****   */
 333:Core/Src/main.c ****   if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 334:Core/Src/main.c ****   {
 335:Core/Src/main.c ****     Error_Handler();
 336:Core/Src/main.c ****   }
 337:Core/Src/main.c **** 
 338:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB buses clocks
 339:Core/Src/main.c ****   */
 340:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 341:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 342:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 343:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 344:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 345:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 346:Core/Src/main.c **** 
 347:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 348:Core/Src/main.c ****   {
 349:Core/Src/main.c ****     Error_Handler();
 350:Core/Src/main.c ****   }
 351:Core/Src/main.c **** }
 352:Core/Src/main.c **** 
 353:Core/Src/main.c **** /**
 354:Core/Src/main.c ****   * @brief TIM4 Initialization Function
 355:Core/Src/main.c ****   * @param None
 356:Core/Src/main.c ****   * @retval None
 357:Core/Src/main.c ****   */
 358:Core/Src/main.c **** static void MX_TIM4_Init(void)
 359:Core/Src/main.c **** {
 360:Core/Src/main.c **** 
 361:Core/Src/main.c ****   /* USER CODE BEGIN TIM4_Init 0 */
 362:Core/Src/main.c **** 
 363:Core/Src/main.c ****   /* USER CODE END TIM4_Init 0 */
 364:Core/Src/main.c **** 
 365:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 366:Core/Src/main.c ****   TIM_OC_InitTypeDef sConfigOC = {0};
 367:Core/Src/main.c **** 
 368:Core/Src/main.c ****   /* USER CODE BEGIN TIM4_Init 1 */
 369:Core/Src/main.c **** 
 370:Core/Src/main.c ****   /* USER CODE END TIM4_Init 1 */
 371:Core/Src/main.c ****   htim4.Instance = TIM4;
 372:Core/Src/main.c ****   htim4.Init.Prescaler = 249;
 373:Core/Src/main.c ****   htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
ARM GAS  /tmp/ccpnyFe8.s 			page 8


 374:Core/Src/main.c ****   htim4.Init.Period = 99;
 375:Core/Src/main.c ****   htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 376:Core/Src/main.c ****   htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 377:Core/Src/main.c ****   if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 378:Core/Src/main.c ****   {
 379:Core/Src/main.c ****     Error_Handler();
 380:Core/Src/main.c ****   }
 381:Core/Src/main.c ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 382:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 383:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 384:Core/Src/main.c ****   {
 385:Core/Src/main.c ****     Error_Handler();
 386:Core/Src/main.c ****   }
 387:Core/Src/main.c ****   sConfigOC.OCMode = TIM_OCMODE_PWM1;
 388:Core/Src/main.c ****   sConfigOC.Pulse = 0;
 389:Core/Src/main.c ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 390:Core/Src/main.c ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 391:Core/Src/main.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 392:Core/Src/main.c ****   {
 393:Core/Src/main.c ****     Error_Handler();
 394:Core/Src/main.c ****   }
 395:Core/Src/main.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 396:Core/Src/main.c ****   {
 397:Core/Src/main.c ****     Error_Handler();
 398:Core/Src/main.c ****   }
 399:Core/Src/main.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 400:Core/Src/main.c ****   {
 401:Core/Src/main.c ****     Error_Handler();
 402:Core/Src/main.c ****   }
 403:Core/Src/main.c ****   /* USER CODE BEGIN TIM4_Init 2 */
 404:Core/Src/main.c **** 
 405:Core/Src/main.c ****   /* USER CODE END TIM4_Init 2 */
 406:Core/Src/main.c ****   HAL_TIM_MspPostInit(&htim4);
 407:Core/Src/main.c **** 
 408:Core/Src/main.c **** }
 409:Core/Src/main.c **** 
 410:Core/Src/main.c **** /**
 411:Core/Src/main.c ****   * @brief TIM6 Initialization Function
 412:Core/Src/main.c ****   * @param None
 413:Core/Src/main.c ****   * @retval None
 414:Core/Src/main.c ****   */
 415:Core/Src/main.c **** static void MX_TIM6_Init(void)
 416:Core/Src/main.c **** {
 417:Core/Src/main.c **** 
 418:Core/Src/main.c ****   /* USER CODE BEGIN TIM6_Init 0 */
 419:Core/Src/main.c **** 
 420:Core/Src/main.c ****   /* USER CODE END TIM6_Init 0 */
 421:Core/Src/main.c **** 
 422:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 423:Core/Src/main.c **** 
 424:Core/Src/main.c ****   /* USER CODE BEGIN TIM6_Init 1 */
 425:Core/Src/main.c **** 
 426:Core/Src/main.c ****   /* USER CODE END TIM6_Init 1 */
 427:Core/Src/main.c ****   htim6.Instance = TIM6;
 428:Core/Src/main.c ****   htim6.Init.Prescaler = 999;
 429:Core/Src/main.c ****   htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 430:Core/Src/main.c ****   htim6.Init.Period = 999;
ARM GAS  /tmp/ccpnyFe8.s 			page 9


 431:Core/Src/main.c ****   htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 432:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 433:Core/Src/main.c ****   {
 434:Core/Src/main.c ****     Error_Handler();
 435:Core/Src/main.c ****   }
 436:Core/Src/main.c ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 437:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 438:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 439:Core/Src/main.c ****   {
 440:Core/Src/main.c ****     Error_Handler();
 441:Core/Src/main.c ****   }
 442:Core/Src/main.c ****   /* USER CODE BEGIN TIM6_Init 2 */
 443:Core/Src/main.c **** 
 444:Core/Src/main.c ****   /* USER CODE END TIM6_Init 2 */
 445:Core/Src/main.c **** 
 446:Core/Src/main.c **** }
 447:Core/Src/main.c **** 
 448:Core/Src/main.c **** /**
 449:Core/Src/main.c ****   * @brief USART6 Initialization Function
 450:Core/Src/main.c ****   * @param None
 451:Core/Src/main.c ****   * @retval None
 452:Core/Src/main.c ****   */
 453:Core/Src/main.c **** static void MX_USART6_UART_Init(void)
 454:Core/Src/main.c **** {
 455:Core/Src/main.c **** 
 456:Core/Src/main.c ****   /* USER CODE BEGIN USART6_Init 0 */
 457:Core/Src/main.c **** 
 458:Core/Src/main.c ****   /* USER CODE END USART6_Init 0 */
 459:Core/Src/main.c **** 
 460:Core/Src/main.c ****   /* USER CODE BEGIN USART6_Init 1 */
 461:Core/Src/main.c **** 
 462:Core/Src/main.c ****   /* USER CODE END USART6_Init 1 */
 463:Core/Src/main.c ****   huart6.Instance = USART6;
 464:Core/Src/main.c ****   huart6.Init.BaudRate = 115200;
 465:Core/Src/main.c ****   huart6.Init.WordLength = UART_WORDLENGTH_8B;
 466:Core/Src/main.c ****   huart6.Init.StopBits = UART_STOPBITS_1;
 467:Core/Src/main.c ****   huart6.Init.Parity = UART_PARITY_NONE;
 468:Core/Src/main.c ****   huart6.Init.Mode = UART_MODE_TX_RX;
 469:Core/Src/main.c ****   huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 470:Core/Src/main.c ****   huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 471:Core/Src/main.c ****   if (HAL_UART_Init(&huart6) != HAL_OK)
 472:Core/Src/main.c ****   {
 473:Core/Src/main.c ****     Error_Handler();
 474:Core/Src/main.c ****   }
 475:Core/Src/main.c ****   /* USER CODE BEGIN USART6_Init 2 */
 476:Core/Src/main.c **** 
 477:Core/Src/main.c ****   /* USER CODE END USART6_Init 2 */
 478:Core/Src/main.c **** 
 479:Core/Src/main.c **** }
 480:Core/Src/main.c **** 
 481:Core/Src/main.c **** /**
 482:Core/Src/main.c ****   * @brief GPIO Initialization Function
 483:Core/Src/main.c ****   * @param None
 484:Core/Src/main.c ****   * @retval None
 485:Core/Src/main.c ****   */
 486:Core/Src/main.c **** static void MX_GPIO_Init(void)
 487:Core/Src/main.c **** {
ARM GAS  /tmp/ccpnyFe8.s 			page 10


  28              		.loc 1 487 1 view -0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 16
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  33 0000 84B0     		sub	sp, sp, #16
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 16
 488:Core/Src/main.c **** /* USER CODE BEGIN MX_GPIO_Init_1 */
 489:Core/Src/main.c **** /* USER CODE END MX_GPIO_Init_1 */
 490:Core/Src/main.c **** 
 491:Core/Src/main.c ****   /* GPIO Ports Clock Enable */
 492:Core/Src/main.c ****   __HAL_RCC_GPIOH_CLK_ENABLE();
  36              		.loc 1 492 3 view .LVU1
  37              	.LBB4:
  38              		.loc 1 492 3 view .LVU2
  39 0002 0022     		movs	r2, #0
  40 0004 0192     		str	r2, [sp, #4]
  41              		.loc 1 492 3 view .LVU3
  42 0006 104B     		ldr	r3, .L3
  43 0008 196B     		ldr	r1, [r3, #48]
  44 000a 41F08001 		orr	r1, r1, #128
  45 000e 1963     		str	r1, [r3, #48]
  46              		.loc 1 492 3 view .LVU4
  47 0010 196B     		ldr	r1, [r3, #48]
  48 0012 01F08001 		and	r1, r1, #128
  49 0016 0191     		str	r1, [sp, #4]
  50              		.loc 1 492 3 view .LVU5
  51 0018 0199     		ldr	r1, [sp, #4]
  52              	.LBE4:
  53              		.loc 1 492 3 view .LVU6
 493:Core/Src/main.c ****   __HAL_RCC_GPIOD_CLK_ENABLE();
  54              		.loc 1 493 3 view .LVU7
  55              	.LBB5:
  56              		.loc 1 493 3 view .LVU8
  57 001a 0292     		str	r2, [sp, #8]
  58              		.loc 1 493 3 view .LVU9
  59 001c 196B     		ldr	r1, [r3, #48]
  60 001e 41F00801 		orr	r1, r1, #8
  61 0022 1963     		str	r1, [r3, #48]
  62              		.loc 1 493 3 view .LVU10
  63 0024 196B     		ldr	r1, [r3, #48]
  64 0026 01F00801 		and	r1, r1, #8
  65 002a 0291     		str	r1, [sp, #8]
  66              		.loc 1 493 3 view .LVU11
  67 002c 0299     		ldr	r1, [sp, #8]
  68              	.LBE5:
  69              		.loc 1 493 3 view .LVU12
 494:Core/Src/main.c ****   __HAL_RCC_GPIOC_CLK_ENABLE();
  70              		.loc 1 494 3 view .LVU13
  71              	.LBB6:
  72              		.loc 1 494 3 view .LVU14
  73 002e 0392     		str	r2, [sp, #12]
  74              		.loc 1 494 3 view .LVU15
  75 0030 1A6B     		ldr	r2, [r3, #48]
  76 0032 42F00402 		orr	r2, r2, #4
  77 0036 1A63     		str	r2, [r3, #48]
ARM GAS  /tmp/ccpnyFe8.s 			page 11


  78              		.loc 1 494 3 view .LVU16
  79 0038 1B6B     		ldr	r3, [r3, #48]
  80 003a 03F00403 		and	r3, r3, #4
  81 003e 0393     		str	r3, [sp, #12]
  82              		.loc 1 494 3 view .LVU17
  83 0040 039B     		ldr	r3, [sp, #12]
  84              	.LBE6:
  85              		.loc 1 494 3 view .LVU18
 495:Core/Src/main.c **** 
 496:Core/Src/main.c **** /* USER CODE BEGIN MX_GPIO_Init_2 */
 497:Core/Src/main.c **** /* USER CODE END MX_GPIO_Init_2 */
 498:Core/Src/main.c **** }
  86              		.loc 1 498 1 is_stmt 0 view .LVU19
  87 0042 04B0     		add	sp, sp, #16
  88              	.LCFI1:
  89              		.cfi_def_cfa_offset 0
  90              		@ sp needed
  91 0044 7047     		bx	lr
  92              	.L4:
  93 0046 00BF     		.align	2
  94              	.L3:
  95 0048 00380240 		.word	1073887232
  96              		.cfi_endproc
  97              	.LFE141:
  99              		.section	.text.HAL_TIM_PeriodElapsedCallback,"ax",%progbits
 100              		.align	1
 101              		.global	HAL_TIM_PeriodElapsedCallback
 102              		.syntax unified
 103              		.thumb
 104              		.thumb_func
 106              	HAL_TIM_PeriodElapsedCallback:
 107              	.LVL0:
 108              	.LFB134:
 104:Core/Src/main.c ****   if (htim->Instance == TIM6) {
 109              		.loc 1 104 61 is_stmt 1 view -0
 110              		.cfi_startproc
 111              		@ args = 0, pretend = 0, frame = 0
 112              		@ frame_needed = 0, uses_anonymous_args = 0
 113              		@ link register save eliminated.
 105:Core/Src/main.c ****     current.greenPulse = (current.greenPulse + speed) % current.greenMod;
 114              		.loc 1 105 3 view .LVU21
 105:Core/Src/main.c ****     current.greenPulse = (current.greenPulse + speed) % current.greenMod;
 115              		.loc 1 105 11 is_stmt 0 view .LVU22
 116 0000 0268     		ldr	r2, [r0]
 105:Core/Src/main.c ****     current.greenPulse = (current.greenPulse + speed) % current.greenMod;
 117              		.loc 1 105 6 view .LVU23
 118 0002 264B     		ldr	r3, .L23
 119 0004 9A42     		cmp	r2, r3
 120 0006 00D0     		beq	.L22
 121 0008 7047     		bx	lr
 122              	.L22:
 104:Core/Src/main.c ****   if (htim->Instance == TIM6) {
 123              		.loc 1 104 61 view .LVU24
 124 000a 10B4     		push	{r4}
 125              	.LCFI2:
 126              		.cfi_def_cfa_offset 4
 127              		.cfi_offset 4, -4
ARM GAS  /tmp/ccpnyFe8.s 			page 12


 106:Core/Src/main.c ****     current.yellowPulse = (current.yellowPulse + speed) % current.yellowMod;
 128              		.loc 1 106 5 is_stmt 1 view .LVU25
 106:Core/Src/main.c ****     current.yellowPulse = (current.yellowPulse + speed) % current.yellowMod;
 129              		.loc 1 106 34 is_stmt 0 view .LVU26
 130 000c 2448     		ldr	r0, .L23+4
 131              	.LVL1:
 106:Core/Src/main.c ****     current.yellowPulse = (current.yellowPulse + speed) % current.yellowMod;
 132              		.loc 1 106 34 view .LVU27
 133 000e 0168     		ldr	r1, [r0]
 106:Core/Src/main.c ****     current.yellowPulse = (current.yellowPulse + speed) % current.yellowMod;
 134              		.loc 1 106 46 view .LVU28
 135 0010 244B     		ldr	r3, .L23+8
 136 0012 1B68     		ldr	r3, [r3]
 137 0014 1944     		add	r1, r1, r3
 106:Core/Src/main.c ****     current.yellowPulse = (current.yellowPulse + speed) % current.yellowMod;
 138              		.loc 1 106 64 view .LVU29
 139 0016 4268     		ldr	r2, [r0, #4]
 106:Core/Src/main.c ****     current.yellowPulse = (current.yellowPulse + speed) % current.yellowMod;
 140              		.loc 1 106 55 view .LVU30
 141 0018 91FBF2F4 		sdiv	r4, r1, r2
 142 001c 02FB1411 		mls	r1, r2, r4, r1
 106:Core/Src/main.c ****     current.yellowPulse = (current.yellowPulse + speed) % current.yellowMod;
 143              		.loc 1 106 24 view .LVU31
 144 0020 0160     		str	r1, [r0]
 107:Core/Src/main.c ****     current.redPulse = (current.redPulse + speed) % current.redMod;
 145              		.loc 1 107 5 is_stmt 1 view .LVU32
 107:Core/Src/main.c ****     current.redPulse = (current.redPulse + speed) % current.redMod;
 146              		.loc 1 107 35 is_stmt 0 view .LVU33
 147 0022 8268     		ldr	r2, [r0, #8]
 107:Core/Src/main.c ****     current.redPulse = (current.redPulse + speed) % current.redMod;
 148              		.loc 1 107 48 view .LVU34
 149 0024 1A44     		add	r2, r2, r3
 107:Core/Src/main.c ****     current.redPulse = (current.redPulse + speed) % current.redMod;
 150              		.loc 1 107 66 view .LVU35
 151 0026 C468     		ldr	r4, [r0, #12]
 107:Core/Src/main.c ****     current.redPulse = (current.redPulse + speed) % current.redMod;
 152              		.loc 1 107 57 view .LVU36
 153 0028 92FBF4FC 		sdiv	ip, r2, r4
 154 002c 04FB1C22 		mls	r2, r4, ip, r2
 107:Core/Src/main.c ****     current.redPulse = (current.redPulse + speed) % current.redMod;
 155              		.loc 1 107 25 view .LVU37
 156 0030 8260     		str	r2, [r0, #8]
 108:Core/Src/main.c **** 
 157              		.loc 1 108 5 is_stmt 1 view .LVU38
 108:Core/Src/main.c **** 
 158              		.loc 1 108 32 is_stmt 0 view .LVU39
 159 0032 0469     		ldr	r4, [r0, #16]
 108:Core/Src/main.c **** 
 160              		.loc 1 108 42 view .LVU40
 161 0034 2344     		add	r3, r3, r4
 108:Core/Src/main.c **** 
 162              		.loc 1 108 60 view .LVU41
 163 0036 4469     		ldr	r4, [r0, #20]
 108:Core/Src/main.c **** 
 164              		.loc 1 108 51 view .LVU42
 165 0038 93FBF4FC 		sdiv	ip, r3, r4
 166 003c 04FB1C33 		mls	r3, r4, ip, r3
ARM GAS  /tmp/ccpnyFe8.s 			page 13


 108:Core/Src/main.c **** 
 167              		.loc 1 108 22 view .LVU43
 168 0040 0361     		str	r3, [r0, #16]
 110:Core/Src/main.c ****       htim4.Instance->CCR2 = 0;
 169              		.loc 1 110 5 is_stmt 1 view .LVU44
 110:Core/Src/main.c ****       htim4.Instance->CCR2 = 0;
 170              		.loc 1 110 8 is_stmt 0 view .LVU45
 171 0042 C829     		cmp	r1, #200
 172 0044 12DD     		ble	.L7
 111:Core/Src/main.c ****     } else {
 173              		.loc 1 111 7 is_stmt 1 view .LVU46
 111:Core/Src/main.c ****     } else {
 174              		.loc 1 111 12 is_stmt 0 view .LVU47
 175 0046 1849     		ldr	r1, .L23+12
 176 0048 0968     		ldr	r1, [r1]
 111:Core/Src/main.c ****     } else {
 177              		.loc 1 111 28 view .LVU48
 178 004a 0020     		movs	r0, #0
 179 004c 8863     		str	r0, [r1, #56]
 180              	.L8:
 115:Core/Src/main.c ****       htim4.Instance->CCR3 = 0;
 181              		.loc 1 115 5 is_stmt 1 view .LVU49
 115:Core/Src/main.c ****       htim4.Instance->CCR3 = 0;
 182              		.loc 1 115 8 is_stmt 0 view .LVU50
 183 004e C82A     		cmp	r2, #200
 184 0050 14DD     		ble	.L11
 116:Core/Src/main.c ****     } else {
 185              		.loc 1 116 7 is_stmt 1 view .LVU51
 116:Core/Src/main.c ****     } else {
 186              		.loc 1 116 12 is_stmt 0 view .LVU52
 187 0052 154A     		ldr	r2, .L23+12
 188 0054 1268     		ldr	r2, [r2]
 116:Core/Src/main.c ****     } else {
 189              		.loc 1 116 28 view .LVU53
 190 0056 0021     		movs	r1, #0
 191 0058 D163     		str	r1, [r2, #60]
 192              	.L12:
 120:Core/Src/main.c ****       htim4.Instance->CCR4 = 0;
 193              		.loc 1 120 5 is_stmt 1 view .LVU54
 120:Core/Src/main.c ****       htim4.Instance->CCR4 = 0;
 194              		.loc 1 120 8 is_stmt 0 view .LVU55
 195 005a C82B     		cmp	r3, #200
 196 005c 16DD     		ble	.L15
 121:Core/Src/main.c ****     } else {
 197              		.loc 1 121 7 is_stmt 1 view .LVU56
 121:Core/Src/main.c ****     } else {
 198              		.loc 1 121 12 is_stmt 0 view .LVU57
 199 005e 124B     		ldr	r3, .L23+12
 200 0060 1B68     		ldr	r3, [r3]
 121:Core/Src/main.c ****     } else {
 201              		.loc 1 121 28 view .LVU58
 202 0062 0022     		movs	r2, #0
 203 0064 1A64     		str	r2, [r3, #64]
 204              	.L5:
 126:Core/Src/main.c **** 
 205              		.loc 1 126 1 view .LVU59
 206 0066 5DF8044B 		ldr	r4, [sp], #4
ARM GAS  /tmp/ccpnyFe8.s 			page 14


 207              	.LCFI3:
 208              		.cfi_remember_state
 209              		.cfi_restore 4
 210              		.cfi_def_cfa_offset 0
 211 006a 7047     		bx	lr
 212              	.L7:
 213              	.LCFI4:
 214              		.cfi_restore_state
 113:Core/Src/main.c ****     }
 215              		.loc 1 113 7 is_stmt 1 view .LVU60
 113:Core/Src/main.c ****     }
 216              		.loc 1 113 77 is_stmt 0 view .LVU61
 217 006c 6429     		cmp	r1, #100
 218 006e 01DD     		ble	.L10
 113:Core/Src/main.c ****     }
 219              		.loc 1 113 83 discriminator 2 view .LVU62
 220 0070 C1F1C801 		rsb	r1, r1, #200
 221              	.L10:
 113:Core/Src/main.c ****     }
 222              		.loc 1 113 12 discriminator 4 view .LVU63
 223 0074 0C48     		ldr	r0, .L23+12
 224 0076 0068     		ldr	r0, [r0]
 113:Core/Src/main.c ****     }
 225              		.loc 1 113 28 discriminator 4 view .LVU64
 226 0078 8163     		str	r1, [r0, #56]
 227 007a E8E7     		b	.L8
 228              	.L11:
 118:Core/Src/main.c ****     }
 229              		.loc 1 118 7 is_stmt 1 view .LVU65
 118:Core/Src/main.c ****     }
 230              		.loc 1 118 79 is_stmt 0 view .LVU66
 231 007c 642A     		cmp	r2, #100
 232 007e 01DD     		ble	.L14
 118:Core/Src/main.c ****     }
 233              		.loc 1 118 85 discriminator 2 view .LVU67
 234 0080 C2F1C802 		rsb	r2, r2, #200
 235              	.L14:
 118:Core/Src/main.c ****     }
 236              		.loc 1 118 12 discriminator 4 view .LVU68
 237 0084 0849     		ldr	r1, .L23+12
 238 0086 0968     		ldr	r1, [r1]
 118:Core/Src/main.c ****     }
 239              		.loc 1 118 28 discriminator 4 view .LVU69
 240 0088 CA63     		str	r2, [r1, #60]
 241 008a E6E7     		b	.L12
 242              	.L15:
 123:Core/Src/main.c ****     }
 243              		.loc 1 123 7 is_stmt 1 view .LVU70
 123:Core/Src/main.c ****     }
 244              		.loc 1 123 73 is_stmt 0 view .LVU71
 245 008c 642B     		cmp	r3, #100
 246 008e 01DD     		ble	.L17
 123:Core/Src/main.c ****     }
 247              		.loc 1 123 79 discriminator 2 view .LVU72
 248 0090 C3F1C803 		rsb	r3, r3, #200
 249              	.L17:
 123:Core/Src/main.c ****     }
ARM GAS  /tmp/ccpnyFe8.s 			page 15


 250              		.loc 1 123 12 discriminator 4 view .LVU73
 251 0094 044A     		ldr	r2, .L23+12
 252 0096 1268     		ldr	r2, [r2]
 123:Core/Src/main.c ****     }
 253              		.loc 1 123 28 discriminator 4 view .LVU74
 254 0098 1364     		str	r3, [r2, #64]
 126:Core/Src/main.c **** 
 255              		.loc 1 126 1 view .LVU75
 256 009a E4E7     		b	.L5
 257              	.L24:
 258              		.align	2
 259              	.L23:
 260 009c 00100040 		.word	1073745920
 261 00a0 00000000 		.word	current
 262 00a4 00000000 		.word	speed
 263 00a8 00000000 		.word	htim4
 264              		.cfi_endproc
 265              	.LFE134:
 267              		.section	.rodata.Handler.str1.4,"aMS",%progbits,1
 268              		.align	2
 269              	.LC0:
 270 0000 456E7465 		.ascii	"Enter green start phase: \000"
 270      72206772 
 270      65656E20 
 270      73746172 
 270      74207068 
 271 001a 0000     		.align	2
 272              	.LC1:
 273 001c 456E7465 		.ascii	"Enter green mod: \000"
 273      72206772 
 273      65656E20 
 273      6D6F643A 
 273      2000
 274 002e 0000     		.align	2
 275              	.LC2:
 276 0030 456E7465 		.ascii	"Enter yellow start phase: \000"
 276      72207965 
 276      6C6C6F77 
 276      20737461 
 276      72742070 
 277 004b 00       		.align	2
 278              	.LC3:
 279 004c 456E7465 		.ascii	"Enter yellow mod: \000"
 279      72207965 
 279      6C6C6F77 
 279      206D6F64 
 279      3A2000
 280 005f 00       		.align	2
 281              	.LC4:
 282 0060 456E7465 		.ascii	"Enter red start phase: \000"
 282      72207265 
 282      64207374 
 282      61727420 
 282      70686173 
 283              		.align	2
 284              	.LC5:
 285 0078 456E7465 		.ascii	"Enter red mod: \000"
ARM GAS  /tmp/ccpnyFe8.s 			page 16


 285      72207265 
 285      64206D6F 
 285      643A2000 
 286              		.align	2
 287              	.LC6:
 288 0088 43757374 		.ascii	"Custom mode:\012Green: %d, %d\012Yellow: %d, %d\012"
 288      6F6D206D 
 288      6F64653A 
 288      0A477265 
 288      656E3A20 
 289 00b2 5265643A 		.ascii	"Red: %d, %d\012\000"
 289      2025642C 
 289      2025640A 
 289      00
 290 00bf 00       		.align	2
 291              	.LC7:
 292 00c0 43757272 		.ascii	"Current mode: %d\012\000"
 292      656E7420 
 292      6D6F6465 
 292      3A202564 
 292      0A00
 293 00d2 0000     		.align	2
 294              	.LC8:
 295 00d4 43757272 		.ascii	"Current speed: %d\012\000"
 295      656E7420 
 295      73706565 
 295      643A2025 
 295      640A00
 296 00e7 00       		.align	2
 297              	.LC9:
 298 00e8 43757374 		.ascii	"Custom mode:\012Green: pulse = %d, mod = %d\012Yell"
 298      6F6D206D 
 298      6F64653A 
 298      0A477265 
 298      656E3A20 
 299 0115 6F773A20 		.ascii	"ow: pulse = %d, mod = %d\012Red: pulse = %d, mod = "
 299      70756C73 
 299      65203D20 
 299      25642C20 
 299      6D6F6420 
 300 0145 25640A00 		.ascii	"%d\012\000"
 301 0149 000000   		.align	2
 302              	.LC10:
 303 014c 556E6B6E 		.ascii	"Unknown parameter\012\000"
 303      6F776E20 
 303      70617261 
 303      6D657465 
 303      720A00
 304              		.section	.text.Handler,"ax",%progbits
 305              		.align	1
 306              		.global	Handler
 307              		.syntax unified
 308              		.thumb
 309              		.thumb_func
 311              	Handler:
 312              	.LVL2:
 313              	.LFB135:
ARM GAS  /tmp/ccpnyFe8.s 			page 17


 131:Core/Src/main.c ****   int32_t receivedNumber = 0;
 314              		.loc 1 131 28 is_stmt 1 view -0
 315              		.cfi_startproc
 316              		@ args = 0, pretend = 0, frame = 0
 317              		@ frame_needed = 0, uses_anonymous_args = 0
 131:Core/Src/main.c ****   int32_t receivedNumber = 0;
 318              		.loc 1 131 28 is_stmt 0 view .LVU77
 319 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 320              	.LCFI5:
 321              		.cfi_def_cfa_offset 20
 322              		.cfi_offset 4, -20
 323              		.cfi_offset 5, -16
 324              		.cfi_offset 6, -12
 325              		.cfi_offset 7, -8
 326              		.cfi_offset 14, -4
 327 0002 85B0     		sub	sp, sp, #20
 328              	.LCFI6:
 329              		.cfi_def_cfa_offset 40
 330 0004 0446     		mov	r4, r0
 132:Core/Src/main.c **** 
 331              		.loc 1 132 3 is_stmt 1 view .LVU78
 332              	.LVL3:
 134:Core/Src/main.c ****     is_main_menu = 0;
 333              		.loc 1 134 3 view .LVU79
 334              	.LBB7:
 134:Core/Src/main.c ****     is_main_menu = 0;
 335              		.loc 1 134 19 is_stmt 0 view .LVU80
 336 0006 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 134:Core/Src/main.c ****     is_main_menu = 0;
 337              		.loc 1 134 6 view .LVU81
 338 0008 7BB1     		cbz	r3, .L48
 339              	.LBE7:
 141:Core/Src/main.c ****   if (!is_main_menu) {
 340              		.loc 1 141 3 is_stmt 1 view .LVU82
 141:Core/Src/main.c ****   if (!is_main_menu) {
 341              		.loc 1 141 20 is_stmt 0 view .LVU83
 342 000a FFF7FEFF 		bl	atoi
 343              	.LVL4:
 142:Core/Src/main.c ****     switch (custom_mode_parameter_num)
 344              		.loc 1 142 3 is_stmt 1 view .LVU84
 142:Core/Src/main.c ****     switch (custom_mode_parameter_num)
 345              		.loc 1 142 7 is_stmt 0 view .LVU85
 346 000e A44B     		ldr	r3, .L50
 347 0010 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 142:Core/Src/main.c ****     switch (custom_mode_parameter_num)
 348              		.loc 1 142 6 view .LVU86
 349 0012 002B     		cmp	r3, #0
 350 0014 40F0B780 		bne	.L28
 143:Core/Src/main.c ****     {
 351              		.loc 1 143 5 is_stmt 1 view .LVU87
 352 0018 A24B     		ldr	r3, .L50+4
 353 001a 1B68     		ldr	r3, [r3]
 354 001c 052B     		cmp	r3, #5
 355 001e 33D8     		bhi	.L29
 356 0020 DFE803F0 		tbb	[pc, r3]
 357              	.L31:
 358 0024 1E       		.byte	(.L36-.L31)/2
ARM GAS  /tmp/ccpnyFe8.s 			page 18


 359 0025 37       		.byte	(.L35-.L31)/2
 360 0026 51       		.byte	(.L34-.L31)/2
 361 0027 68       		.byte	(.L33-.L31)/2
 362 0028 7E       		.byte	(.L32-.L31)/2
 363 0029 91       		.byte	(.L30-.L31)/2
 364              	.LVL5:
 365              		.p2align 1
 366              	.L48:
 367              	.LBB9:
 368              	.LBB8:
 135:Core/Src/main.c ****     custom_mode_parameter_num = 0;
 369              		.loc 1 135 5 view .LVU88
 135:Core/Src/main.c ****     custom_mode_parameter_num = 0;
 370              		.loc 1 135 18 is_stmt 0 view .LVU89
 371 002a 9D4A     		ldr	r2, .L50
 372 002c 1370     		strb	r3, [r2]
 136:Core/Src/main.c ****     sprintf(buf, "Enter green start phase: ");
 373              		.loc 1 136 5 is_stmt 1 view .LVU90
 136:Core/Src/main.c ****     sprintf(buf, "Enter green start phase: ");
 374              		.loc 1 136 31 is_stmt 0 view .LVU91
 375 002e 9D4A     		ldr	r2, .L50+4
 376 0030 1360     		str	r3, [r2]
 137:Core/Src/main.c ****     HAL_UART_Transmit(&huart6, (uint8_t*)buf, strlen(buf), HAL_MAX_DELAY);
 377              		.loc 1 137 5 is_stmt 1 view .LVU92
 378 0032 9D4D     		ldr	r5, .L50+8
 379 0034 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 380              	.LVL6:
 137:Core/Src/main.c ****     HAL_UART_Transmit(&huart6, (uint8_t*)buf, strlen(buf), HAL_MAX_DELAY);
 381              		.loc 1 137 5 is_stmt 0 view .LVU93
 382 0036 2060     		str	r0, [r4]	@ unaligned
 383 0038 6160     		str	r1, [r4, #4]	@ unaligned
 384 003a A260     		str	r2, [r4, #8]	@ unaligned
 385 003c E360     		str	r3, [r4, #12]	@ unaligned
 386 003e 03CD     		ldmia	r5!, {r0, r1}
 387 0040 2061     		str	r0, [r4, #16]	@ unaligned
 388 0042 6161     		str	r1, [r4, #20]	@ unaligned
 389 0044 2B88     		ldrh	r3, [r5]	@ unaligned
 390 0046 2383     		strh	r3, [r4, #24]	@ unaligned
 138:Core/Src/main.c ****     return;
 391              		.loc 1 138 5 is_stmt 1 view .LVU94
 138:Core/Src/main.c ****     return;
 392              		.loc 1 138 47 is_stmt 0 view .LVU95
 393 0048 2046     		mov	r0, r4
 394 004a FFF7FEFF 		bl	strlen
 395              	.LVL7:
 138:Core/Src/main.c ****     return;
 396              		.loc 1 138 5 discriminator 1 view .LVU96
 397 004e 4FF0FF33 		mov	r3, #-1
 398 0052 82B2     		uxth	r2, r0
 399 0054 2146     		mov	r1, r4
 400 0056 9548     		ldr	r0, .L50+12
 401 0058 FFF7FEFF 		bl	HAL_UART_Transmit
 402              	.LVL8:
 139:Core/Src/main.c ****   }
 403              		.loc 1 139 5 is_stmt 1 view .LVU97
 404              	.L25:
 139:Core/Src/main.c ****   }
ARM GAS  /tmp/ccpnyFe8.s 			page 19


 405              		.loc 1 139 5 is_stmt 0 view .LVU98
 406              	.LBE8:
 407              	.LBE9:
 224:Core/Src/main.c **** 
 408              		.loc 1 224 1 view .LVU99
 409 005c 05B0     		add	sp, sp, #20
 410              	.LCFI7:
 411              		.cfi_remember_state
 412              		.cfi_def_cfa_offset 20
 413              		@ sp needed
 414 005e F0BD     		pop	{r4, r5, r6, r7, pc}
 415              	.LVL9:
 416              	.L36:
 417              	.LCFI8:
 418              		.cfi_restore_state
 419              	.LBB10:
 146:Core/Src/main.c ****       sprintf(buf, "Enter green mod: ");
 420              		.loc 1 146 7 is_stmt 1 view .LVU100
 146:Core/Src/main.c ****       sprintf(buf, "Enter green mod: ");
 421              		.loc 1 146 26 is_stmt 0 view .LVU101
 422 0060 934B     		ldr	r3, .L50+16
 423 0062 1860     		str	r0, [r3]
 147:Core/Src/main.c ****       HAL_UART_Transmit(&huart6, (uint8_t*)buf, strlen(buf), HAL_MAX_DELAY);
 424              		.loc 1 147 7 is_stmt 1 view .LVU102
 425 0064 934D     		ldr	r5, .L50+20
 426 0066 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 427              	.LVL10:
 147:Core/Src/main.c ****       HAL_UART_Transmit(&huart6, (uint8_t*)buf, strlen(buf), HAL_MAX_DELAY);
 428              		.loc 1 147 7 is_stmt 0 view .LVU103
 429 0068 2060     		str	r0, [r4]	@ unaligned
 430              	.LVL11:
 147:Core/Src/main.c ****       HAL_UART_Transmit(&huart6, (uint8_t*)buf, strlen(buf), HAL_MAX_DELAY);
 431              		.loc 1 147 7 view .LVU104
 432 006a 6160     		str	r1, [r4, #4]	@ unaligned
 433 006c A260     		str	r2, [r4, #8]	@ unaligned
 434 006e E360     		str	r3, [r4, #12]	@ unaligned
 435 0070 2B88     		ldrh	r3, [r5]	@ unaligned
 436 0072 2382     		strh	r3, [r4, #16]	@ unaligned
 148:Core/Src/main.c ****       break;
 437              		.loc 1 148 7 is_stmt 1 view .LVU105
 148:Core/Src/main.c ****       break;
 438              		.loc 1 148 49 is_stmt 0 view .LVU106
 439 0074 2046     		mov	r0, r4
 440 0076 FFF7FEFF 		bl	strlen
 441              	.LVL12:
 148:Core/Src/main.c ****       break;
 442              		.loc 1 148 7 discriminator 1 view .LVU107
 443 007a 4FF0FF33 		mov	r3, #-1
 444 007e 82B2     		uxth	r2, r0
 445 0080 2146     		mov	r1, r4
 446 0082 8A48     		ldr	r0, .L50+12
 447 0084 FFF7FEFF 		bl	HAL_UART_Transmit
 448              	.LVL13:
 149:Core/Src/main.c ****     case 1:
 449              		.loc 1 149 7 is_stmt 1 view .LVU108
 450              	.L29:
 149:Core/Src/main.c ****     case 1:
ARM GAS  /tmp/ccpnyFe8.s 			page 20


 451              		.loc 1 149 7 is_stmt 0 view .LVU109
 452              	.LBE10:
 180:Core/Src/main.c ****     return;
 453              		.loc 1 180 5 is_stmt 1 view .LVU110
 180:Core/Src/main.c ****     return;
 454              		.loc 1 180 30 is_stmt 0 view .LVU111
 455 0088 864A     		ldr	r2, .L50+4
 456 008a 1368     		ldr	r3, [r2]
 457 008c 0133     		adds	r3, r3, #1
 458 008e 1360     		str	r3, [r2]
 181:Core/Src/main.c ****   }
 459              		.loc 1 181 5 is_stmt 1 view .LVU112
 460 0090 E4E7     		b	.L25
 461              	.LVL14:
 462              	.L35:
 463              	.LBB11:
 151:Core/Src/main.c ****       sprintf(buf, "Enter yellow start phase: ");
 464              		.loc 1 151 7 view .LVU113
 151:Core/Src/main.c ****       sprintf(buf, "Enter yellow start phase: ");
 465              		.loc 1 151 24 is_stmt 0 view .LVU114
 466 0092 874B     		ldr	r3, .L50+16
 467 0094 5860     		str	r0, [r3, #4]
 152:Core/Src/main.c ****       HAL_UART_Transmit(&huart6, (uint8_t*)buf, strlen(buf), HAL_MAX_DELAY);
 468              		.loc 1 152 7 is_stmt 1 view .LVU115
 469 0096 884D     		ldr	r5, .L50+24
 470 0098 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 471              	.LVL15:
 152:Core/Src/main.c ****       HAL_UART_Transmit(&huart6, (uint8_t*)buf, strlen(buf), HAL_MAX_DELAY);
 472              		.loc 1 152 7 is_stmt 0 view .LVU116
 473 009a 2060     		str	r0, [r4]	@ unaligned
 474              	.LVL16:
 152:Core/Src/main.c ****       HAL_UART_Transmit(&huart6, (uint8_t*)buf, strlen(buf), HAL_MAX_DELAY);
 475              		.loc 1 152 7 view .LVU117
 476 009c 6160     		str	r1, [r4, #4]	@ unaligned
 477 009e A260     		str	r2, [r4, #8]	@ unaligned
 478 00a0 E360     		str	r3, [r4, #12]	@ unaligned
 479 00a2 03CD     		ldmia	r5!, {r0, r1}
 480 00a4 2061     		str	r0, [r4, #16]	@ unaligned
 481 00a6 6161     		str	r1, [r4, #20]	@ unaligned
 482 00a8 2A88     		ldrh	r2, [r5]	@ unaligned
 483 00aa AB78     		ldrb	r3, [r5, #2]	@ zero_extendqisi2
 484 00ac 2283     		strh	r2, [r4, #24]	@ unaligned
 485 00ae A376     		strb	r3, [r4, #26]
 153:Core/Src/main.c ****       break;
 486              		.loc 1 153 7 is_stmt 1 view .LVU118
 153:Core/Src/main.c ****       break;
 487              		.loc 1 153 49 is_stmt 0 view .LVU119
 488 00b0 2046     		mov	r0, r4
 489 00b2 FFF7FEFF 		bl	strlen
 490              	.LVL17:
 153:Core/Src/main.c ****       break;
 491              		.loc 1 153 7 discriminator 1 view .LVU120
 492 00b6 4FF0FF33 		mov	r3, #-1
 493 00ba 82B2     		uxth	r2, r0
 494 00bc 2146     		mov	r1, r4
 495 00be 7B48     		ldr	r0, .L50+12
 496 00c0 FFF7FEFF 		bl	HAL_UART_Transmit
ARM GAS  /tmp/ccpnyFe8.s 			page 21


 497              	.LVL18:
 154:Core/Src/main.c ****     case 2:
 498              		.loc 1 154 7 is_stmt 1 view .LVU121
 499 00c4 E0E7     		b	.L29
 500              	.LVL19:
 501              	.L34:
 156:Core/Src/main.c ****       sprintf(buf, "Enter yellow mod: ");
 502              		.loc 1 156 7 view .LVU122
 156:Core/Src/main.c ****       sprintf(buf, "Enter yellow mod: ");
 503              		.loc 1 156 27 is_stmt 0 view .LVU123
 504 00c6 7A4B     		ldr	r3, .L50+16
 505 00c8 9860     		str	r0, [r3, #8]
 157:Core/Src/main.c ****       HAL_UART_Transmit(&huart6, (uint8_t*)buf, strlen(buf), HAL_MAX_DELAY);
 506              		.loc 1 157 7 is_stmt 1 view .LVU124
 507 00ca 7C4D     		ldr	r5, .L50+28
 508 00cc 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 509              	.LVL20:
 157:Core/Src/main.c ****       HAL_UART_Transmit(&huart6, (uint8_t*)buf, strlen(buf), HAL_MAX_DELAY);
 510              		.loc 1 157 7 is_stmt 0 view .LVU125
 511 00ce 2060     		str	r0, [r4]	@ unaligned
 512              	.LVL21:
 157:Core/Src/main.c ****       HAL_UART_Transmit(&huart6, (uint8_t*)buf, strlen(buf), HAL_MAX_DELAY);
 513              		.loc 1 157 7 view .LVU126
 514 00d0 6160     		str	r1, [r4, #4]	@ unaligned
 515 00d2 A260     		str	r2, [r4, #8]	@ unaligned
 516 00d4 E360     		str	r3, [r4, #12]	@ unaligned
 517 00d6 2A88     		ldrh	r2, [r5]	@ unaligned
 518 00d8 AB78     		ldrb	r3, [r5, #2]	@ zero_extendqisi2
 519 00da 2282     		strh	r2, [r4, #16]	@ unaligned
 520 00dc A374     		strb	r3, [r4, #18]
 158:Core/Src/main.c ****       break;
 521              		.loc 1 158 7 is_stmt 1 view .LVU127
 158:Core/Src/main.c ****       break;
 522              		.loc 1 158 49 is_stmt 0 view .LVU128
 523 00de 2046     		mov	r0, r4
 524 00e0 FFF7FEFF 		bl	strlen
 525              	.LVL22:
 158:Core/Src/main.c ****       break;
 526              		.loc 1 158 7 discriminator 1 view .LVU129
 527 00e4 4FF0FF33 		mov	r3, #-1
 528 00e8 82B2     		uxth	r2, r0
 529 00ea 2146     		mov	r1, r4
 530 00ec 6F48     		ldr	r0, .L50+12
 531 00ee FFF7FEFF 		bl	HAL_UART_Transmit
 532              	.LVL23:
 159:Core/Src/main.c ****     case 3:
 533              		.loc 1 159 7 is_stmt 1 view .LVU130
 534 00f2 C9E7     		b	.L29
 535              	.LVL24:
 536              	.L33:
 161:Core/Src/main.c ****       sprintf(buf, "Enter red start phase: ");
 537              		.loc 1 161 7 view .LVU131
 161:Core/Src/main.c ****       sprintf(buf, "Enter red start phase: ");
 538              		.loc 1 161 25 is_stmt 0 view .LVU132
 539 00f4 6E4B     		ldr	r3, .L50+16
 540 00f6 D860     		str	r0, [r3, #12]
 162:Core/Src/main.c ****       HAL_UART_Transmit(&huart6, (uint8_t*)buf, strlen(buf), HAL_MAX_DELAY);
ARM GAS  /tmp/ccpnyFe8.s 			page 22


 541              		.loc 1 162 7 is_stmt 1 view .LVU133
 542 00f8 714D     		ldr	r5, .L50+32
 543 00fa 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 544              	.LVL25:
 162:Core/Src/main.c ****       HAL_UART_Transmit(&huart6, (uint8_t*)buf, strlen(buf), HAL_MAX_DELAY);
 545              		.loc 1 162 7 is_stmt 0 view .LVU134
 546 00fc 2060     		str	r0, [r4]	@ unaligned
 547              	.LVL26:
 162:Core/Src/main.c ****       HAL_UART_Transmit(&huart6, (uint8_t*)buf, strlen(buf), HAL_MAX_DELAY);
 548              		.loc 1 162 7 view .LVU135
 549 00fe 6160     		str	r1, [r4, #4]	@ unaligned
 550 0100 A260     		str	r2, [r4, #8]	@ unaligned
 551 0102 E360     		str	r3, [r4, #12]	@ unaligned
 552 0104 03CD     		ldmia	r5!, {r0, r1}
 553 0106 2061     		str	r0, [r4, #16]	@ unaligned
 554 0108 6161     		str	r1, [r4, #20]	@ unaligned
 163:Core/Src/main.c ****       break;
 555              		.loc 1 163 7 is_stmt 1 view .LVU136
 163:Core/Src/main.c ****       break;
 556              		.loc 1 163 49 is_stmt 0 view .LVU137
 557 010a 2046     		mov	r0, r4
 558 010c FFF7FEFF 		bl	strlen
 559              	.LVL27:
 163:Core/Src/main.c ****       break;
 560              		.loc 1 163 7 discriminator 1 view .LVU138
 561 0110 4FF0FF33 		mov	r3, #-1
 562 0114 82B2     		uxth	r2, r0
 563 0116 2146     		mov	r1, r4
 564 0118 6448     		ldr	r0, .L50+12
 565 011a FFF7FEFF 		bl	HAL_UART_Transmit
 566              	.LVL28:
 164:Core/Src/main.c ****     case 4:
 567              		.loc 1 164 7 is_stmt 1 view .LVU139
 568 011e B3E7     		b	.L29
 569              	.LVL29:
 570              	.L32:
 166:Core/Src/main.c ****       sprintf(buf, "Enter red mod: ");
 571              		.loc 1 166 7 view .LVU140
 166:Core/Src/main.c ****       sprintf(buf, "Enter red mod: ");
 572              		.loc 1 166 24 is_stmt 0 view .LVU141
 573 0120 634B     		ldr	r3, .L50+16
 574 0122 1861     		str	r0, [r3, #16]
 167:Core/Src/main.c ****       HAL_UART_Transmit(&huart6, (uint8_t*)buf, strlen(buf), HAL_MAX_DELAY);
 575              		.loc 1 167 7 is_stmt 1 view .LVU142
 576 0124 674D     		ldr	r5, .L50+36
 577 0126 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 578              	.LVL30:
 167:Core/Src/main.c ****       HAL_UART_Transmit(&huart6, (uint8_t*)buf, strlen(buf), HAL_MAX_DELAY);
 579              		.loc 1 167 7 is_stmt 0 view .LVU143
 580 0128 2060     		str	r0, [r4]	@ unaligned
 581              	.LVL31:
 167:Core/Src/main.c ****       HAL_UART_Transmit(&huart6, (uint8_t*)buf, strlen(buf), HAL_MAX_DELAY);
 582              		.loc 1 167 7 view .LVU144
 583 012a 6160     		str	r1, [r4, #4]	@ unaligned
 584 012c A260     		str	r2, [r4, #8]	@ unaligned
 585 012e E360     		str	r3, [r4, #12]	@ unaligned
 168:Core/Src/main.c ****       break;
ARM GAS  /tmp/ccpnyFe8.s 			page 23


 586              		.loc 1 168 7 is_stmt 1 view .LVU145
 168:Core/Src/main.c ****       break;
 587              		.loc 1 168 49 is_stmt 0 view .LVU146
 588 0130 2046     		mov	r0, r4
 589 0132 FFF7FEFF 		bl	strlen
 590              	.LVL32:
 168:Core/Src/main.c ****       break;
 591              		.loc 1 168 7 discriminator 1 view .LVU147
 592 0136 4FF0FF33 		mov	r3, #-1
 593 013a 82B2     		uxth	r2, r0
 594 013c 2146     		mov	r1, r4
 595 013e 5B48     		ldr	r0, .L50+12
 596 0140 FFF7FEFF 		bl	HAL_UART_Transmit
 597              	.LVL33:
 169:Core/Src/main.c ****     case 5:
 598              		.loc 1 169 7 is_stmt 1 view .LVU148
 599 0144 A0E7     		b	.L29
 600              	.LVL34:
 601              	.L30:
 171:Core/Src/main.c ****       sprintf(buf, "Custom mode:\nGreen: %d, %d\nYellow: %d, %d\nRed: %d, %d\n",
 602              		.loc 1 171 7 view .LVU149
 171:Core/Src/main.c ****       sprintf(buf, "Custom mode:\nGreen: %d, %d\nYellow: %d, %d\nRed: %d, %d\n",
 603              		.loc 1 171 22 is_stmt 0 view .LVU150
 604 0146 5A4A     		ldr	r2, .L50+16
 605 0148 5061     		str	r0, [r2, #20]
 172:Core/Src/main.c ****         current.greenPulse, current.greenMod, current.yellowPulse, current.yellowMod,
 606              		.loc 1 172 7 is_stmt 1 view .LVU151
 607 014a 0390     		str	r0, [sp, #12]
 608 014c 1369     		ldr	r3, [r2, #16]
 609 014e 0293     		str	r3, [sp, #8]
 610 0150 D368     		ldr	r3, [r2, #12]
 611 0152 0193     		str	r3, [sp, #4]
 612 0154 9368     		ldr	r3, [r2, #8]
 613 0156 0093     		str	r3, [sp]
 614 0158 5368     		ldr	r3, [r2, #4]
 615 015a 1268     		ldr	r2, [r2]
 616 015c 5A49     		ldr	r1, .L50+40
 617 015e 2046     		mov	r0, r4
 618              	.LVL35:
 172:Core/Src/main.c ****         current.greenPulse, current.greenMod, current.yellowPulse, current.yellowMod,
 619              		.loc 1 172 7 is_stmt 0 view .LVU152
 620 0160 FFF7FEFF 		bl	sprintf
 621              	.LVL36:
 175:Core/Src/main.c ****       custom_mode_parameter_num = 0;
 622              		.loc 1 175 7 is_stmt 1 view .LVU153
 175:Core/Src/main.c ****       custom_mode_parameter_num = 0;
 623              		.loc 1 175 49 is_stmt 0 view .LVU154
 624 0164 2046     		mov	r0, r4
 625 0166 FFF7FEFF 		bl	strlen
 626              	.LVL37:
 175:Core/Src/main.c ****       custom_mode_parameter_num = 0;
 627              		.loc 1 175 7 discriminator 1 view .LVU155
 628 016a 4FF0FF33 		mov	r3, #-1
 629 016e 82B2     		uxth	r2, r0
 630 0170 2146     		mov	r1, r4
 631 0172 4E48     		ldr	r0, .L50+12
 632 0174 FFF7FEFF 		bl	HAL_UART_Transmit
ARM GAS  /tmp/ccpnyFe8.s 			page 24


 633              	.LVL38:
 176:Core/Src/main.c ****       is_main_menu = 1;
 634              		.loc 1 176 7 is_stmt 1 view .LVU156
 176:Core/Src/main.c ****       is_main_menu = 1;
 635              		.loc 1 176 33 is_stmt 0 view .LVU157
 636 0178 4A4B     		ldr	r3, .L50+4
 637 017a 0022     		movs	r2, #0
 638 017c 1A60     		str	r2, [r3]
 177:Core/Src/main.c ****       return;
 639              		.loc 1 177 7 is_stmt 1 view .LVU158
 177:Core/Src/main.c ****       return;
 640              		.loc 1 177 20 is_stmt 0 view .LVU159
 641 017e 484B     		ldr	r3, .L50
 642 0180 0122     		movs	r2, #1
 643 0182 1A70     		strb	r2, [r3]
 178:Core/Src/main.c ****     }
 644              		.loc 1 178 7 is_stmt 1 view .LVU160
 645 0184 6AE7     		b	.L25
 646              	.LVL39:
 647              	.L28:
 178:Core/Src/main.c ****     }
 648              		.loc 1 178 7 is_stmt 0 view .LVU161
 649              	.LBE11:
 184:Core/Src/main.c ****   {
 650              		.loc 1 184 3 is_stmt 1 view .LVU162
 651 0186 0138     		subs	r0, r0, #1
 652              	.LVL40:
 184:Core/Src/main.c ****   {
 653              		.loc 1 184 3 is_stmt 0 view .LVU163
 654 0188 0428     		cmp	r0, #4
 655 018a 00F2C580 		bhi	.L37
 656 018e DFE800F0 		tbb	[pc, r0]
 657              	.L39:
 658 0192 03       		.byte	(.L43-.L39)/2
 659 0193 29       		.byte	(.L42-.L39)/2
 660 0194 51       		.byte	(.L41-.L39)/2
 661 0195 6B       		.byte	(.L40-.L39)/2
 662 0196 A9       		.byte	(.L38-.L39)/2
 663 0197 00       		.p2align 1
 664              	.L43:
 665              	.LBB12:
 187:Core/Src/main.c ****     current = modes[mode_index];
 666              		.loc 1 187 5 is_stmt 1 view .LVU164
 187:Core/Src/main.c ****     current = modes[mode_index];
 667              		.loc 1 187 30 is_stmt 0 view .LVU165
 668 0198 4C4B     		ldr	r3, .L50+44
 669 019a 1E68     		ldr	r6, [r3]
 670 019c 0136     		adds	r6, r6, #1
 187:Core/Src/main.c ****     current = modes[mode_index];
 671              		.loc 1 187 35 view .LVU166
 672 019e 4C4A     		ldr	r2, .L50+48
 673 01a0 1268     		ldr	r2, [r2]
 674 01a2 B6FBF2F1 		udiv	r1, r6, r2
 675 01a6 02FB1166 		mls	r6, r2, r1, r6
 187:Core/Src/main.c ****     current = modes[mode_index];
 676              		.loc 1 187 16 view .LVU167
 677 01aa 1E60     		str	r6, [r3]
ARM GAS  /tmp/ccpnyFe8.s 			page 25


 188:Core/Src/main.c ****     sprintf(buf, "Current mode: %d\n", mode_index + 1);
 678              		.loc 1 188 5 is_stmt 1 view .LVU168
 188:Core/Src/main.c ****     sprintf(buf, "Current mode: %d\n", mode_index + 1);
 679              		.loc 1 188 13 is_stmt 0 view .LVU169
 680 01ac 06EB4603 		add	r3, r6, r6, lsl #1
 681 01b0 3F4F     		ldr	r7, .L50+16
 682 01b2 484D     		ldr	r5, .L50+52
 683 01b4 05EBC305 		add	r5, r5, r3, lsl #3
 684 01b8 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 685              	.LVL41:
 188:Core/Src/main.c ****     sprintf(buf, "Current mode: %d\n", mode_index + 1);
 686              		.loc 1 188 13 view .LVU170
 687 01ba 0FC7     		stmia	r7!, {r0, r1, r2, r3}
 688 01bc 95E80300 		ldm	r5, {r0, r1}
 689 01c0 87E80300 		stm	r7, {r0, r1}
 189:Core/Src/main.c ****     HAL_UART_Transmit(&huart6, (uint8_t*)buf, strlen(buf), HAL_MAX_DELAY);
 690              		.loc 1 189 5 is_stmt 1 view .LVU171
 691 01c4 721C     		adds	r2, r6, #1
 692 01c6 4449     		ldr	r1, .L50+56
 693 01c8 2046     		mov	r0, r4
 694 01ca FFF7FEFF 		bl	sprintf
 695              	.LVL42:
 190:Core/Src/main.c ****     break;
 696              		.loc 1 190 5 view .LVU172
 190:Core/Src/main.c ****     break;
 697              		.loc 1 190 47 is_stmt 0 view .LVU173
 698 01ce 2046     		mov	r0, r4
 699 01d0 FFF7FEFF 		bl	strlen
 700              	.LVL43:
 190:Core/Src/main.c ****     break;
 701              		.loc 1 190 5 discriminator 1 view .LVU174
 702 01d4 4FF0FF33 		mov	r3, #-1
 703 01d8 82B2     		uxth	r2, r0
 704 01da 2146     		mov	r1, r4
 705 01dc 3348     		ldr	r0, .L50+12
 706 01de FFF7FEFF 		bl	HAL_UART_Transmit
 707              	.LVL44:
 191:Core/Src/main.c ****   case 2:
 708              		.loc 1 191 5 is_stmt 1 view .LVU175
 709 01e2 3BE7     		b	.L25
 710              	.LVL45:
 711              	.L42:
 193:Core/Src/main.c ****     sprintf(buf, "Current mode: %d\n", mode_index + 1);
 712              		.loc 1 193 5 view .LVU176
 193:Core/Src/main.c ****     sprintf(buf, "Current mode: %d\n", mode_index + 1);
 713              		.loc 1 193 32 is_stmt 0 view .LVU177
 714 01e4 3A4B     		ldr	r3, .L50+48
 715 01e6 1B68     		ldr	r3, [r3]
 716 01e8 384D     		ldr	r5, .L50+44
 717 01ea 2A68     		ldr	r2, [r5]
 718 01ec 1A44     		add	r2, r2, r3
 193:Core/Src/main.c ****     sprintf(buf, "Current mode: %d\n", mode_index + 1);
 719              		.loc 1 193 45 view .LVU178
 720 01ee 013A     		subs	r2, r2, #1
 193:Core/Src/main.c ****     sprintf(buf, "Current mode: %d\n", mode_index + 1);
 721              		.loc 1 193 50 view .LVU179
 722 01f0 B2FBF3F1 		udiv	r1, r2, r3
ARM GAS  /tmp/ccpnyFe8.s 			page 26


 723 01f4 03FB1122 		mls	r2, r3, r1, r2
 193:Core/Src/main.c ****     sprintf(buf, "Current mode: %d\n", mode_index + 1);
 724              		.loc 1 193 16 view .LVU180
 725 01f8 2A60     		str	r2, [r5]
 194:Core/Src/main.c ****     HAL_UART_Transmit(&huart6, (uint8_t*)buf, strlen(buf), HAL_MAX_DELAY);
 726              		.loc 1 194 5 is_stmt 1 view .LVU181
 727 01fa 0132     		adds	r2, r2, #1
 728 01fc 3649     		ldr	r1, .L50+56
 729 01fe 2046     		mov	r0, r4
 730              	.LVL46:
 194:Core/Src/main.c ****     HAL_UART_Transmit(&huart6, (uint8_t*)buf, strlen(buf), HAL_MAX_DELAY);
 731              		.loc 1 194 5 is_stmt 0 view .LVU182
 732 0200 FFF7FEFF 		bl	sprintf
 733              	.LVL47:
 195:Core/Src/main.c ****     current = modes[mode_index];
 734              		.loc 1 195 5 is_stmt 1 view .LVU183
 195:Core/Src/main.c ****     current = modes[mode_index];
 735              		.loc 1 195 47 is_stmt 0 view .LVU184
 736 0204 2046     		mov	r0, r4
 737 0206 FFF7FEFF 		bl	strlen
 738              	.LVL48:
 195:Core/Src/main.c ****     current = modes[mode_index];
 739              		.loc 1 195 5 discriminator 1 view .LVU185
 740 020a 4FF0FF33 		mov	r3, #-1
 741 020e 82B2     		uxth	r2, r0
 742 0210 2146     		mov	r1, r4
 743 0212 2648     		ldr	r0, .L50+12
 744 0214 FFF7FEFF 		bl	HAL_UART_Transmit
 745              	.LVL49:
 196:Core/Src/main.c ****     break;
 746              		.loc 1 196 5 is_stmt 1 view .LVU186
 196:Core/Src/main.c ****     break;
 747              		.loc 1 196 20 is_stmt 0 view .LVU187
 748 0218 2B68     		ldr	r3, [r5]
 196:Core/Src/main.c ****     break;
 749              		.loc 1 196 13 view .LVU188
 750 021a 03EB4303 		add	r3, r3, r3, lsl #1
 751 021e 244D     		ldr	r5, .L50+16
 752 0220 2C4C     		ldr	r4, .L50+52
 753              	.LVL50:
 196:Core/Src/main.c ****     break;
 754              		.loc 1 196 13 view .LVU189
 755 0222 04EBC304 		add	r4, r4, r3, lsl #3
 756 0226 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 757 0228 0FC5     		stmia	r5!, {r0, r1, r2, r3}
 758 022a 94E80300 		ldm	r4, {r0, r1}
 759 022e 85E80300 		stm	r5, {r0, r1}
 197:Core/Src/main.c ****   case 3:
 760              		.loc 1 197 5 is_stmt 1 view .LVU190
 761 0232 13E7     		b	.L25
 762              	.LVL51:
 763              	.L41:
 199:Core/Src/main.c ****     if (speed > 10) {
 764              		.loc 1 199 5 view .LVU191
 199:Core/Src/main.c ****     if (speed > 10) {
 765              		.loc 1 199 10 is_stmt 0 view .LVU192
 766 0234 294A     		ldr	r2, .L50+60
ARM GAS  /tmp/ccpnyFe8.s 			page 27


 767 0236 1368     		ldr	r3, [r2]
 768 0238 0133     		adds	r3, r3, #1
 769 023a 1360     		str	r3, [r2]
 200:Core/Src/main.c ****       speed = 10;
 770              		.loc 1 200 5 is_stmt 1 view .LVU193
 200:Core/Src/main.c ****       speed = 10;
 771              		.loc 1 200 8 is_stmt 0 view .LVU194
 772 023c 0A2B     		cmp	r3, #10
 773 023e 02DD     		ble	.L44
 201:Core/Src/main.c ****     }
 774              		.loc 1 201 7 is_stmt 1 view .LVU195
 201:Core/Src/main.c ****     }
 775              		.loc 1 201 13 is_stmt 0 view .LVU196
 776 0240 1346     		mov	r3, r2
 777 0242 0A22     		movs	r2, #10
 778 0244 1A60     		str	r2, [r3]
 779              	.L44:
 203:Core/Src/main.c ****     HAL_UART_Transmit(&huart6, (uint8_t*)buf, strlen(buf), HAL_MAX_DELAY);
 780              		.loc 1 203 5 is_stmt 1 view .LVU197
 781 0246 254B     		ldr	r3, .L50+60
 782 0248 1A68     		ldr	r2, [r3]
 783 024a 2549     		ldr	r1, .L50+64
 784 024c 2046     		mov	r0, r4
 785              	.LVL52:
 203:Core/Src/main.c ****     HAL_UART_Transmit(&huart6, (uint8_t*)buf, strlen(buf), HAL_MAX_DELAY);
 786              		.loc 1 203 5 is_stmt 0 view .LVU198
 787 024e FFF7FEFF 		bl	sprintf
 788              	.LVL53:
 204:Core/Src/main.c ****     break;
 789              		.loc 1 204 5 is_stmt 1 view .LVU199
 204:Core/Src/main.c ****     break;
 790              		.loc 1 204 47 is_stmt 0 view .LVU200
 791 0252 2046     		mov	r0, r4
 792 0254 FFF7FEFF 		bl	strlen
 793              	.LVL54:
 204:Core/Src/main.c ****     break;
 794              		.loc 1 204 5 discriminator 1 view .LVU201
 795 0258 4FF0FF33 		mov	r3, #-1
 796 025c 82B2     		uxth	r2, r0
 797 025e 2146     		mov	r1, r4
 798 0260 1248     		ldr	r0, .L50+12
 799 0262 FFF7FEFF 		bl	HAL_UART_Transmit
 800              	.LVL55:
 205:Core/Src/main.c ****   case 4:
 801              		.loc 1 205 5 is_stmt 1 view .LVU202
 802 0266 F9E6     		b	.L25
 803              	.LVL56:
 804              	.L40:
 207:Core/Src/main.c ****     if (speed < 1) {
 805              		.loc 1 207 5 view .LVU203
 207:Core/Src/main.c ****     if (speed < 1) {
 806              		.loc 1 207 10 is_stmt 0 view .LVU204
 807 0268 1C4A     		ldr	r2, .L50+60
 808 026a 1368     		ldr	r3, [r2]
 809 026c 013B     		subs	r3, r3, #1
 810 026e 1360     		str	r3, [r2]
 208:Core/Src/main.c ****       speed = 1;
ARM GAS  /tmp/ccpnyFe8.s 			page 28


 811              		.loc 1 208 5 is_stmt 1 view .LVU205
 208:Core/Src/main.c ****       speed = 1;
 812              		.loc 1 208 8 is_stmt 0 view .LVU206
 813 0270 002B     		cmp	r3, #0
 814 0272 10DD     		ble	.L49
 815              	.L45:
 211:Core/Src/main.c ****     HAL_UART_Transmit(&huart6, (uint8_t*)buf, strlen(buf), HAL_MAX_DELAY);
 816              		.loc 1 211 5 is_stmt 1 view .LVU207
 817 0274 194B     		ldr	r3, .L50+60
 818 0276 1A68     		ldr	r2, [r3]
 819 0278 1949     		ldr	r1, .L50+64
 820 027a 2046     		mov	r0, r4
 821              	.LVL57:
 211:Core/Src/main.c ****     HAL_UART_Transmit(&huart6, (uint8_t*)buf, strlen(buf), HAL_MAX_DELAY);
 822              		.loc 1 211 5 is_stmt 0 view .LVU208
 823 027c FFF7FEFF 		bl	sprintf
 824              	.LVL58:
 212:Core/Src/main.c ****     break;
 825              		.loc 1 212 5 is_stmt 1 view .LVU209
 212:Core/Src/main.c ****     break;
 826              		.loc 1 212 47 is_stmt 0 view .LVU210
 827 0280 2046     		mov	r0, r4
 828 0282 FFF7FEFF 		bl	strlen
 829              	.LVL59:
 212:Core/Src/main.c ****     break;
 830              		.loc 1 212 5 discriminator 1 view .LVU211
 831 0286 4FF0FF33 		mov	r3, #-1
 832 028a 82B2     		uxth	r2, r0
 833 028c 2146     		mov	r1, r4
 834 028e 0748     		ldr	r0, .L50+12
 835 0290 FFF7FEFF 		bl	HAL_UART_Transmit
 836              	.LVL60:
 213:Core/Src/main.c ****   case 5:
 837              		.loc 1 213 5 is_stmt 1 view .LVU212
 838 0294 E2E6     		b	.L25
 839              	.LVL61:
 840              	.L49:
 209:Core/Src/main.c ****     }
 841              		.loc 1 209 7 view .LVU213
 209:Core/Src/main.c ****     }
 842              		.loc 1 209 13 is_stmt 0 view .LVU214
 843 0296 1346     		mov	r3, r2
 844 0298 0122     		movs	r2, #1
 845 029a 1A60     		str	r2, [r3]
 846 029c EAE7     		b	.L45
 847              	.L51:
 848 029e 00BF     		.align	2
 849              	.L50:
 850 02a0 00000000 		.word	is_main_menu
 851 02a4 00000000 		.word	custom_mode_parameter_num
 852 02a8 00000000 		.word	.LC0
 853 02ac 00000000 		.word	huart6
 854 02b0 00000000 		.word	current
 855 02b4 1C000000 		.word	.LC1
 856 02b8 30000000 		.word	.LC2
 857 02bc 4C000000 		.word	.LC3
 858 02c0 60000000 		.word	.LC4
ARM GAS  /tmp/ccpnyFe8.s 			page 29


 859 02c4 78000000 		.word	.LC5
 860 02c8 88000000 		.word	.LC6
 861 02cc 00000000 		.word	mode_index
 862 02d0 00000000 		.word	modes_length
 863 02d4 00000000 		.word	modes
 864 02d8 C0000000 		.word	.LC7
 865 02dc 00000000 		.word	speed
 866 02e0 D4000000 		.word	.LC8
 867              	.L38:
 215:Core/Src/main.c ****       custom.greenPulse, custom.greenMod, custom.yellowPulse, custom.yellowMod, custom.redPulse, cu
 868              		.loc 1 215 5 is_stmt 1 view .LVU215
 869 02e4 174A     		ldr	r2, .L52
 870 02e6 5369     		ldr	r3, [r2, #20]
 871 02e8 0393     		str	r3, [sp, #12]
 872 02ea 1369     		ldr	r3, [r2, #16]
 873 02ec 0293     		str	r3, [sp, #8]
 874 02ee D368     		ldr	r3, [r2, #12]
 875 02f0 0193     		str	r3, [sp, #4]
 876 02f2 9368     		ldr	r3, [r2, #8]
 877 02f4 0093     		str	r3, [sp]
 878 02f6 5368     		ldr	r3, [r2, #4]
 879 02f8 1268     		ldr	r2, [r2]
 880 02fa 1349     		ldr	r1, .L52+4
 881 02fc 2046     		mov	r0, r4
 882              	.LVL62:
 215:Core/Src/main.c ****       custom.greenPulse, custom.greenMod, custom.yellowPulse, custom.yellowMod, custom.redPulse, cu
 883              		.loc 1 215 5 is_stmt 0 view .LVU216
 884 02fe FFF7FEFF 		bl	sprintf
 885              	.LVL63:
 217:Core/Src/main.c ****     break;
 886              		.loc 1 217 5 is_stmt 1 view .LVU217
 217:Core/Src/main.c ****     break;
 887              		.loc 1 217 47 is_stmt 0 view .LVU218
 888 0302 2046     		mov	r0, r4
 889 0304 FFF7FEFF 		bl	strlen
 890              	.LVL64:
 217:Core/Src/main.c ****     break;
 891              		.loc 1 217 5 discriminator 1 view .LVU219
 892 0308 4FF0FF33 		mov	r3, #-1
 893 030c 82B2     		uxth	r2, r0
 894 030e 2146     		mov	r1, r4
 895 0310 0E48     		ldr	r0, .L52+8
 896 0312 FFF7FEFF 		bl	HAL_UART_Transmit
 897              	.LVL65:
 218:Core/Src/main.c ****   default:
 898              		.loc 1 218 5 is_stmt 1 view .LVU220
 899 0316 A1E6     		b	.L25
 900              	.LVL66:
 901              	.L37:
 220:Core/Src/main.c ****     HAL_UART_Transmit(&huart6, (uint8_t*)buf, strlen(buf), HAL_MAX_DELAY);
 902              		.loc 1 220 5 view .LVU221
 903 0318 0D4D     		ldr	r5, .L52+12
 904 031a 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 905              	.LVL67:
 220:Core/Src/main.c ****     HAL_UART_Transmit(&huart6, (uint8_t*)buf, strlen(buf), HAL_MAX_DELAY);
 906              		.loc 1 220 5 is_stmt 0 view .LVU222
 907 031c 2060     		str	r0, [r4]	@ unaligned
ARM GAS  /tmp/ccpnyFe8.s 			page 30


 908 031e 6160     		str	r1, [r4, #4]	@ unaligned
 909 0320 A260     		str	r2, [r4, #8]	@ unaligned
 910 0322 E360     		str	r3, [r4, #12]	@ unaligned
 911 0324 2A88     		ldrh	r2, [r5]	@ unaligned
 912 0326 AB78     		ldrb	r3, [r5, #2]	@ zero_extendqisi2
 913 0328 2282     		strh	r2, [r4, #16]	@ unaligned
 914 032a A374     		strb	r3, [r4, #18]
 221:Core/Src/main.c ****     break;
 915              		.loc 1 221 5 is_stmt 1 view .LVU223
 221:Core/Src/main.c ****     break;
 916              		.loc 1 221 47 is_stmt 0 view .LVU224
 917 032c 2046     		mov	r0, r4
 918 032e FFF7FEFF 		bl	strlen
 919              	.LVL68:
 221:Core/Src/main.c ****     break;
 920              		.loc 1 221 5 discriminator 1 view .LVU225
 921 0332 4FF0FF33 		mov	r3, #-1
 922 0336 82B2     		uxth	r2, r0
 923 0338 2146     		mov	r1, r4
 924 033a 0448     		ldr	r0, .L52+8
 925 033c FFF7FEFF 		bl	HAL_UART_Transmit
 926              	.LVL69:
 222:Core/Src/main.c ****   }
 927              		.loc 1 222 5 is_stmt 1 view .LVU226
 928 0340 8CE6     		b	.L25
 929              	.L53:
 930 0342 00BF     		.align	2
 931              	.L52:
 932 0344 00000000 		.word	custom
 933 0348 E8000000 		.word	.LC9
 934 034c 00000000 		.word	huart6
 935 0350 4C010000 		.word	.LC10
 936              	.LBE12:
 937              		.cfi_endproc
 938              	.LFE135:
 940              		.section	.text.Error_Handler,"ax",%progbits
 941              		.align	1
 942              		.global	Error_Handler
 943              		.syntax unified
 944              		.thumb
 945              		.thumb_func
 947              	Error_Handler:
 948              	.LFB142:
 499:Core/Src/main.c **** 
 500:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 501:Core/Src/main.c **** 
 502:Core/Src/main.c **** /* USER CODE END 4 */
 503:Core/Src/main.c **** 
 504:Core/Src/main.c **** /**
 505:Core/Src/main.c ****   * @brief  This function is executed in case of error occurrence.
 506:Core/Src/main.c ****   * @retval None
 507:Core/Src/main.c ****   */
 508:Core/Src/main.c **** void Error_Handler(void)
 509:Core/Src/main.c **** {
 949              		.loc 1 509 1 view -0
 950              		.cfi_startproc
 951              		@ Volatile: function does not return.
ARM GAS  /tmp/ccpnyFe8.s 			page 31


 952              		@ args = 0, pretend = 0, frame = 0
 953              		@ frame_needed = 0, uses_anonymous_args = 0
 954              		@ link register save eliminated.
 510:Core/Src/main.c ****   /* USER CODE BEGIN Error_Handler_Debug */
 511:Core/Src/main.c ****   /* User can add his own implementation to report the HAL error return state */
 512:Core/Src/main.c ****   __disable_irq();
 955              		.loc 1 512 3 view .LVU228
 956              	.LBB13:
 957              	.LBI13:
 958              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.4.1
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     27. May 2021
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2021 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
ARM GAS  /tmp/ccpnyFe8.s 			page 32


  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
ARM GAS  /tmp/ccpnyFe8.s 			page 33


 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __COMPILER_BARRIER
 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __COMPILER_BARRIER()                   __ASM volatile("":::"memory")
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** /* #########################  Startup and Lowlevel Init  ######################## */
 121:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 122:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __PROGRAM_START
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Initializes data and bss sections
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details This default implementations initialized all data and additional bss
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            sections relying on .copy.table and .zero.table specified properly
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****            in the used linker script.
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 130:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 131:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE __NO_RETURN void __cmsis_start(void)
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 133:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern void _start(void) __NO_RETURN;
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t const* src;
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __copy_table_t;
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 141:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 143:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __zero_table_t;
 145:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 146:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_start__;
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_end__;
 148:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_start__;
 149:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_end__;
 150:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 151:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__copy_table_t const* pTable = &__copy_table_start__; pTable < &__copy_table_end__; ++pTable
 152:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = pTable->src[i];
 154:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 155:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 156:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 157:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__zero_table_t const* pTable = &__zero_table_start__; pTable < &__zero_table_end__; ++pTable
 158:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 159:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = 0u;
 160:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 161:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
ARM GAS  /tmp/ccpnyFe8.s 			page 34


 162:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 163:Drivers/CMSIS/Include/cmsis_gcc.h ****   _start();
 164:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 165:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __PROGRAM_START           __cmsis_start
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 169:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __INITIAL_SP
 170:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __INITIAL_SP              __StackTop
 171:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 172:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_LIMIT
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_LIMIT             __StackLimit
 175:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE
 178:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE            __Vectors
 179:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE_ATTRIBUTE
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE_ATTRIBUTE  __attribute__((used, section(".vectors")))
 183:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 184:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
 186:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_SEAL
 187:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_SEAL              __StackSeal
 188:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 189:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 190:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_SIZE
 191:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_SIZE      8U
 192:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 193:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 194:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_VALUE
 195:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_VALUE     0xFEF5EDA5FEF5EDA5ULL
 196:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 197:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 198:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_STACKSEAL_S (uint32_t* stackTop) {
 200:Drivers/CMSIS/Include/cmsis_gcc.h ****   *((uint64_t *)stackTop) = __TZ_STACK_SEAL_VALUE;
 201:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 202:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 203:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 204:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 205:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 206:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 207:Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 208:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 209:Drivers/CMSIS/Include/cmsis_gcc.h **** */
 210:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 211:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 212:Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 213:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 214:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 215:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 216:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 217:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 218:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
ARM GAS  /tmp/ccpnyFe8.s 			page 35


 219:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 220:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 221:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 222:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 223:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 224:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 225:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 226:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 227:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 228:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 229:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 230:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 231:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 232:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 233:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 234:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi":::"memory")
 235:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 236:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 237:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 238:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 239:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 240:Drivers/CMSIS/Include/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 241:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 242:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe":::"memory")
 243:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 244:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 245:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 246:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 247:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 248:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 249:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 250:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 251:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 252:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 253:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 254:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 255:Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 256:Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 257:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 258:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 259:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 260:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 261:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 262:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 264:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 265:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 266:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 267:Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 268:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 269:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
 270:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 271:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 272:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 273:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 274:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 275:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  /tmp/ccpnyFe8.s 			page 36


 276:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 277:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 278:Drivers/CMSIS/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 279:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DMB(void)
 281:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 282:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 283:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 284:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 285:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 286:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 287:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 288:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in unsigned integer value. For example, 0x12345678 becomes 0x785
 289:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 290:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 291:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV(uint32_t value)
 293:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 294:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 295:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_bswap32(value);
 296:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 298:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 299:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 300:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 301:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 302:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 303:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 304:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 305:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 306:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 307:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order within each halfword of a word. For example, 0x12345678 becomes 
 308:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 309:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 310:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 311:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
 312:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 314:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 315:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 316:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 317:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 318:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 319:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 320:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 321:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 322:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in a 16-bit value and returns the signed 16-bit result. For exam
 323:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 324:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 325:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 326:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int16_t __REVSH(int16_t value)
 327:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 328:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 329:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (int16_t)__builtin_bswap16(value);
 330:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 331:Drivers/CMSIS/Include/cmsis_gcc.h ****   int16_t result;
 332:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccpnyFe8.s 			page 37


 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 334:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 335:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 336:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 337:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 338:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 339:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 340:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
 342:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op1  Value to rotate
 343:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op2  Number of Bits to rotate
 344:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 345:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 346:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
 347:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 348:Drivers/CMSIS/Include/cmsis_gcc.h ****   op2 %= 32U;
 349:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (op2 == 0U)
 350:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 351:Drivers/CMSIS/Include/cmsis_gcc.h ****     return op1;
 352:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 353:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
 354:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 355:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 358:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Breakpoint
 359:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
 360:Drivers/CMSIS/Include/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
 361:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
 362:Drivers/CMSIS/Include/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
 363:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 364:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
 365:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 366:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 367:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 368:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse bit order of value
 369:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
 370:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 371:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 372:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 373:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RBIT(uint32_t value)
 374:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 375:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 376:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 377:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 378:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 379:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 380:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 381:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 382:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 383:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 384:Drivers/CMSIS/Include/cmsis_gcc.h ****   result = value;                      /* r will be reversed bits of v; first get LSB of v */
 385:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (value >>= 1U; value != 0U; value >>= 1U)
 386:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 387:Drivers/CMSIS/Include/cmsis_gcc.h ****     result <<= 1U;
 388:Drivers/CMSIS/Include/cmsis_gcc.h ****     result |= value & 1U;
 389:Drivers/CMSIS/Include/cmsis_gcc.h ****     s--;
ARM GAS  /tmp/ccpnyFe8.s 			page 38


 390:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 391:Drivers/CMSIS/Include/cmsis_gcc.h ****   result <<= s;                        /* shift when v's highest bits are zero */
 392:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 393:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 394:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 395:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 396:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 397:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 398:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Count leading zeros
 399:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Counts the number of leading zeros of a data value.
 400:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to count the leading zeros
 401:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             number of leading zeros in value
 402:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 403:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __CLZ(uint32_t value)
 404:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 405:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Even though __builtin_clz produces a CLZ instruction on ARM, formally
 406:Drivers/CMSIS/Include/cmsis_gcc.h ****      __builtin_clz(0) is undefined behaviour, so handle this case specially.
 407:Drivers/CMSIS/Include/cmsis_gcc.h ****      This guarantees ARM-compatible results if happening to compile on a non-ARM
 408:Drivers/CMSIS/Include/cmsis_gcc.h ****      target, and ensures the compiler doesn't decide to activate any
 409:Drivers/CMSIS/Include/cmsis_gcc.h ****      optimisations using the logic "value was passed to __builtin_clz, so it
 410:Drivers/CMSIS/Include/cmsis_gcc.h ****      is non-zero".
 411:Drivers/CMSIS/Include/cmsis_gcc.h ****      ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
 412:Drivers/CMSIS/Include/cmsis_gcc.h ****      single CLZ instruction.
 413:Drivers/CMSIS/Include/cmsis_gcc.h ****    */
 414:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (value == 0U)
 415:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 416:Drivers/CMSIS/Include/cmsis_gcc.h ****     return 32U;
 417:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 418:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_clz(value);
 419:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 420:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 421:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 422:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 423:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 424:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 425:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 426:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 427:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (8 bit)
 428:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 8 bit value.
 429:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 430:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 431:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 432:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDREXB(volatile uint8_t *addr)
 433:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 434:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 435:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 436:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 437:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, %1" : "=r" (result) : "Q" (*addr) );
 438:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 439:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 440:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 441:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 442:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 443:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 444:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 445:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 446:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccpnyFe8.s 			page 39


 447:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 448:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 449:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (16 bit)
 450:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 16 bit values.
 451:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 452:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 453:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 454:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDREXH(volatile uint16_t *addr)
 455:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 456:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 457:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 458:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 459:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, %1" : "=r" (result) : "Q" (*addr) );
 460:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 461:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 462:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 463:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 464:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 465:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 466:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 467:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 468:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 469:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 470:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 471:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (32 bit)
 472:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 32 bit values.
 473:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 474:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 475:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 476:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
 477:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 478:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 479:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 480:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 481:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 482:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 483:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 484:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 485:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 486:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (8 bit)
 487:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 8 bit values.
 488:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 489:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 490:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 491:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 492:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 493:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXB(uint8_t value, volatile uint8_t *addr)
 494:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 495:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 496:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 497:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexb %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 498:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 499:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 500:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 501:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 502:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 503:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (16 bit)
ARM GAS  /tmp/ccpnyFe8.s 			page 40


 504:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 16 bit values.
 505:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 506:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 507:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 508:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 509:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 510:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXH(uint16_t value, volatile uint16_t *addr)
 511:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 512:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 513:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 514:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexh %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 515:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 516:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 517:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 518:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 519:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 520:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (32 bit)
 521:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 32 bit values.
 522:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 523:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 524:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 525:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 526:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 527:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
 528:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 529:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 530:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 531:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 532:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 533:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 534:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 535:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 536:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 537:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Remove the exclusive lock
 538:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Removes the exclusive lock which is created by LDREX.
 539:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 540:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __CLREX(void)
 541:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 542:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("clrex" ::: "memory");
 543:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 544:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 545:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 546:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 547:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 548:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 549:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 550:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 551:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 552:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 553:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 554:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 555:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
 556:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
 557:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 558:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (1..32)
 559:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 560:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
ARM GAS  /tmp/ccpnyFe8.s 			page 41


 561:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SSAT(ARG1, ARG2) \
 562:Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
 563:Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
 564:Drivers/CMSIS/Include/cmsis_gcc.h ****   int32_t __RES, __ARG1 = (ARG1); \
 565:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("ssat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 566:Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
 567:Drivers/CMSIS/Include/cmsis_gcc.h ****  })
 568:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 569:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 570:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 571:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
 572:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
 573:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 574:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (0..31)
 575:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 576:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 577:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __USAT(ARG1, ARG2) \
 578:Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
 579:Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
 580:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t __RES, __ARG1 = (ARG1); \
 581:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("usat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 582:Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
 583:Drivers/CMSIS/Include/cmsis_gcc.h ****  })
 584:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 585:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 586:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 587:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right with Extend (32 bit)
 588:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Moves each bit of a bitstring right by one bit.
 589:Drivers/CMSIS/Include/cmsis_gcc.h ****            The carry input is shifted in at the left end of the bitstring.
 590:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to rotate
 591:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 592:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 593:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RRX(uint32_t value)
 594:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 595:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 596:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 597:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rrx %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 598:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 599:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 600:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 601:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 602:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 603:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (8 bit)
 604:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 8 bit value.
 605:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 606:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 607:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 608:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDRBT(volatile uint8_t *ptr)
 609:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 610:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 611:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 612:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 613:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, %1" : "=r" (result) : "Q" (*ptr) );
 614:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 615:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 616:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 617:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
ARM GAS  /tmp/ccpnyFe8.s 			page 42


 618:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 619:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 620:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 621:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 622:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 623:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 624:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 625:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (16 bit)
 626:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 16 bit values.
 627:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 628:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 629:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 630:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDRHT(volatile uint16_t *ptr)
 631:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 632:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 633:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 634:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 635:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, %1" : "=r" (result) : "Q" (*ptr) );
 636:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 637:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 638:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 639:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 640:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 641:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 642:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 643:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 644:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 645:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 646:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 647:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (32 bit)
 648:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 32 bit values.
 649:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 650:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 651:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 652:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDRT(volatile uint32_t *ptr)
 653:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 654:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 655:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 656:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrt %0, %1" : "=r" (result) : "Q" (*ptr) );
 657:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 658:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 659:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 660:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 661:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 662:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (8 bit)
 663:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 8 bit values.
 664:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 665:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 666:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 667:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRBT(uint8_t value, volatile uint8_t *ptr)
 668:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 669:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strbt %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 670:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 671:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 672:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 673:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 674:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (16 bit)
ARM GAS  /tmp/ccpnyFe8.s 			page 43


 675:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 16 bit values.
 676:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 677:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 678:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 679:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRHT(uint16_t value, volatile uint16_t *ptr)
 680:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 681:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strht %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 682:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 683:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 684:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 685:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 686:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (32 bit)
 687:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 32 bit values.
 688:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 689:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 690:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 691:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRT(uint32_t value, volatile uint32_t *ptr)
 692:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 693:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strt %1, %0" : "=Q" (*ptr) : "r" (value) );
 694:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 695:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 696:Drivers/CMSIS/Include/cmsis_gcc.h **** #else  /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 697:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 698:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 699:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 700:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 701:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
 702:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
 703:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 704:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (1..32)
 705:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 706:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 707:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int32_t __SSAT(int32_t val, uint32_t sat)
 708:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 709:Drivers/CMSIS/Include/cmsis_gcc.h ****   if ((sat >= 1U) && (sat <= 32U))
 710:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 711:Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t max = (int32_t)((1U << (sat - 1U)) - 1U);
 712:Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t min = -1 - max ;
 713:Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > max)
 714:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 715:Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
 716:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 717:Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < min)
 718:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 719:Drivers/CMSIS/Include/cmsis_gcc.h ****       return min;
 720:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 721:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 722:Drivers/CMSIS/Include/cmsis_gcc.h ****   return val;
 723:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 724:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 725:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 726:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
 727:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
 728:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 729:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (0..31)
 730:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 731:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
ARM GAS  /tmp/ccpnyFe8.s 			page 44


 732:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __USAT(int32_t val, uint32_t sat)
 733:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 734:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (sat <= 31U)
 735:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 736:Drivers/CMSIS/Include/cmsis_gcc.h ****     const uint32_t max = ((1U << sat) - 1U);
 737:Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > (int32_t)max)
 738:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 739:Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
 740:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 741:Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < 0)
 742:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 743:Drivers/CMSIS/Include/cmsis_gcc.h ****       return 0U;
 744:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 745:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 746:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (uint32_t)val;
 747:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 748:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 749:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 750:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 751:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 752:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 753:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 754:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 755:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 756:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 757:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (8 bit)
 758:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB instruction for 8 bit value.
 759:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 760:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 761:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 762:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAB(volatile uint8_t *ptr)
 763:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 764:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 765:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 766:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldab %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 767:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
 768:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 769:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 770:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 771:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 772:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (16 bit)
 773:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH instruction for 16 bit values.
 774:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 775:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 776:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 777:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAH(volatile uint16_t *ptr)
 778:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 779:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 780:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 781:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldah %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 782:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
 783:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 784:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 785:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 786:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 787:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (32 bit)
 788:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA instruction for 32 bit values.
ARM GAS  /tmp/ccpnyFe8.s 			page 45


 789:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 790:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 791:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 792:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDA(volatile uint32_t *ptr)
 793:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 794:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 795:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 796:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("lda %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 797:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 798:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 799:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 800:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 801:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 802:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (8 bit)
 803:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB instruction for 8 bit values.
 804:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 805:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 806:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 807:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLB(uint8_t value, volatile uint8_t *ptr)
 808:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 809:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlb %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 810:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 811:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 812:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 813:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 814:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (16 bit)
 815:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH instruction for 16 bit values.
 816:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 817:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 818:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 819:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLH(uint16_t value, volatile uint16_t *ptr)
 820:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 821:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlh %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 822:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 823:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 824:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 825:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 826:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (32 bit)
 827:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL instruction for 32 bit values.
 828:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 829:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 830:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 831:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STL(uint32_t value, volatile uint32_t *ptr)
 832:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 833:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stl %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 834:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 835:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 836:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 837:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 838:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (8 bit)
 839:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB exclusive instruction for 8 bit value.
 840:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 841:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 842:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 843:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAEXB(volatile uint8_t *ptr)
 844:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 845:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
ARM GAS  /tmp/ccpnyFe8.s 			page 46


 846:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 847:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexb %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 848:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
 849:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 850:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 851:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 852:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 853:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (16 bit)
 854:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH exclusive instruction for 16 bit values.
 855:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 856:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 857:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 858:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAEXH(volatile uint16_t *ptr)
 859:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 860:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 861:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 862:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexh %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 863:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
 864:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 865:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 866:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 867:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 868:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (32 bit)
 869:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA exclusive instruction for 32 bit values.
 870:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 871:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 872:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 873:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDAEX(volatile uint32_t *ptr)
 874:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 875:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 876:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 877:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaex %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 878:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 879:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 880:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 881:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 882:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 883:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (8 bit)
 884:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB exclusive instruction for 8 bit values.
 885:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 886:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 887:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 888:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 889:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 890:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXB(uint8_t value, volatile uint8_t *ptr)
 891:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 892:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 893:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 894:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexb %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 895:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 896:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 897:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 898:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 899:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 900:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (16 bit)
 901:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH exclusive instruction for 16 bit values.
 902:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
ARM GAS  /tmp/ccpnyFe8.s 			page 47


 903:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 904:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 905:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 906:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 907:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXH(uint16_t value, volatile uint16_t *ptr)
 908:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 909:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 910:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 911:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexh %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 912:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 913:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 914:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 915:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 916:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 917:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (32 bit)
 918:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL exclusive instruction for 32 bit values.
 919:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 920:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 921:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 922:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 923:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 924:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEX(uint32_t value, volatile uint32_t *ptr)
 925:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 926:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 927:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 928:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlex %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "memo
 929:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 930:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 931:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 932:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 933:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 934:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 935:Drivers/CMSIS/Include/cmsis_gcc.h **** /*@}*/ /* end of group CMSIS_Core_InstructionInterface */
 936:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 937:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 938:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 939:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 940:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 941:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 942:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 943:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 944:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 945:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 946:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing special-purpose register PRIMASK.
 947:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 948:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 949:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 950:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 951:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 952:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 953:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 954:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 955:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 956:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 957:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
 958:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 959:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
ARM GAS  /tmp/ccpnyFe8.s 			page 48


 960:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 959              		.loc 2 960 27 view .LVU229
 960              	.LBB14:
 961:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 962:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 961              		.loc 2 962 3 view .LVU230
 962              		.syntax unified
 963              	@ 962 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 964 0000 72B6     		cpsid i
 965              	@ 0 "" 2
 966              		.thumb
 967              		.syntax unified
 968              	.L55:
 969              	.LBE14:
 970              	.LBE13:
 513:Core/Src/main.c ****   while (1)
 971              		.loc 1 513 3 view .LVU231
 514:Core/Src/main.c ****   {
 515:Core/Src/main.c ****   }
 972              		.loc 1 515 3 view .LVU232
 513:Core/Src/main.c ****   while (1)
 973              		.loc 1 513 9 view .LVU233
 974 0002 FEE7     		b	.L55
 975              		.cfi_endproc
 976              	.LFE142:
 978              		.section	.text.MX_TIM4_Init,"ax",%progbits
 979              		.align	1
 980              		.syntax unified
 981              		.thumb
 982              		.thumb_func
 984              	MX_TIM4_Init:
 985              	.LFB138:
 359:Core/Src/main.c **** 
 986              		.loc 1 359 1 view -0
 987              		.cfi_startproc
 988              		@ args = 0, pretend = 0, frame = 40
 989              		@ frame_needed = 0, uses_anonymous_args = 0
 990 0000 00B5     		push	{lr}
 991              	.LCFI9:
 992              		.cfi_def_cfa_offset 4
 993              		.cfi_offset 14, -4
 994 0002 8BB0     		sub	sp, sp, #44
 995              	.LCFI10:
 996              		.cfi_def_cfa_offset 48
 365:Core/Src/main.c ****   TIM_OC_InitTypeDef sConfigOC = {0};
 997              		.loc 1 365 3 view .LVU235
 365:Core/Src/main.c ****   TIM_OC_InitTypeDef sConfigOC = {0};
 998              		.loc 1 365 27 is_stmt 0 view .LVU236
 999 0004 0023     		movs	r3, #0
 1000 0006 0893     		str	r3, [sp, #32]
 1001 0008 0993     		str	r3, [sp, #36]
 366:Core/Src/main.c **** 
 1002              		.loc 1 366 3 is_stmt 1 view .LVU237
 366:Core/Src/main.c **** 
 1003              		.loc 1 366 22 is_stmt 0 view .LVU238
 1004 000a 0193     		str	r3, [sp, #4]
 1005 000c 0293     		str	r3, [sp, #8]
ARM GAS  /tmp/ccpnyFe8.s 			page 49


 1006 000e 0393     		str	r3, [sp, #12]
 1007 0010 0493     		str	r3, [sp, #16]
 1008 0012 0593     		str	r3, [sp, #20]
 1009 0014 0693     		str	r3, [sp, #24]
 1010 0016 0793     		str	r3, [sp, #28]
 371:Core/Src/main.c ****   htim4.Init.Prescaler = 249;
 1011              		.loc 1 371 3 is_stmt 1 view .LVU239
 371:Core/Src/main.c ****   htim4.Init.Prescaler = 249;
 1012              		.loc 1 371 18 is_stmt 0 view .LVU240
 1013 0018 1E48     		ldr	r0, .L68
 1014 001a 1F4A     		ldr	r2, .L68+4
 1015 001c 0260     		str	r2, [r0]
 372:Core/Src/main.c ****   htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 1016              		.loc 1 372 3 is_stmt 1 view .LVU241
 372:Core/Src/main.c ****   htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 1017              		.loc 1 372 24 is_stmt 0 view .LVU242
 1018 001e F922     		movs	r2, #249
 1019 0020 4260     		str	r2, [r0, #4]
 373:Core/Src/main.c ****   htim4.Init.Period = 99;
 1020              		.loc 1 373 3 is_stmt 1 view .LVU243
 373:Core/Src/main.c ****   htim4.Init.Period = 99;
 1021              		.loc 1 373 26 is_stmt 0 view .LVU244
 1022 0022 8360     		str	r3, [r0, #8]
 374:Core/Src/main.c ****   htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 1023              		.loc 1 374 3 is_stmt 1 view .LVU245
 374:Core/Src/main.c ****   htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 1024              		.loc 1 374 21 is_stmt 0 view .LVU246
 1025 0024 6322     		movs	r2, #99
 1026 0026 C260     		str	r2, [r0, #12]
 375:Core/Src/main.c ****   htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 1027              		.loc 1 375 3 is_stmt 1 view .LVU247
 375:Core/Src/main.c ****   htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 1028              		.loc 1 375 28 is_stmt 0 view .LVU248
 1029 0028 0361     		str	r3, [r0, #16]
 376:Core/Src/main.c ****   if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 1030              		.loc 1 376 3 is_stmt 1 view .LVU249
 376:Core/Src/main.c ****   if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 1031              		.loc 1 376 32 is_stmt 0 view .LVU250
 1032 002a 8361     		str	r3, [r0, #24]
 377:Core/Src/main.c ****   {
 1033              		.loc 1 377 3 is_stmt 1 view .LVU251
 377:Core/Src/main.c ****   {
 1034              		.loc 1 377 7 is_stmt 0 view .LVU252
 1035 002c FFF7FEFF 		bl	HAL_TIM_PWM_Init
 1036              	.LVL70:
 377:Core/Src/main.c ****   {
 1037              		.loc 1 377 6 discriminator 1 view .LVU253
 1038 0030 30BB     		cbnz	r0, .L63
 381:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 1039              		.loc 1 381 3 is_stmt 1 view .LVU254
 381:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 1040              		.loc 1 381 37 is_stmt 0 view .LVU255
 1041 0032 0023     		movs	r3, #0
 1042 0034 0893     		str	r3, [sp, #32]
 382:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 1043              		.loc 1 382 3 is_stmt 1 view .LVU256
 382:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
ARM GAS  /tmp/ccpnyFe8.s 			page 50


 1044              		.loc 1 382 33 is_stmt 0 view .LVU257
 1045 0036 0993     		str	r3, [sp, #36]
 383:Core/Src/main.c ****   {
 1046              		.loc 1 383 3 is_stmt 1 view .LVU258
 383:Core/Src/main.c ****   {
 1047              		.loc 1 383 7 is_stmt 0 view .LVU259
 1048 0038 08A9     		add	r1, sp, #32
 1049 003a 1648     		ldr	r0, .L68
 1050 003c FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 1051              	.LVL71:
 383:Core/Src/main.c ****   {
 1052              		.loc 1 383 6 discriminator 1 view .LVU260
 1053 0040 00BB     		cbnz	r0, .L64
 387:Core/Src/main.c ****   sConfigOC.Pulse = 0;
 1054              		.loc 1 387 3 is_stmt 1 view .LVU261
 387:Core/Src/main.c ****   sConfigOC.Pulse = 0;
 1055              		.loc 1 387 20 is_stmt 0 view .LVU262
 1056 0042 6023     		movs	r3, #96
 1057 0044 0193     		str	r3, [sp, #4]
 388:Core/Src/main.c ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 1058              		.loc 1 388 3 is_stmt 1 view .LVU263
 388:Core/Src/main.c ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 1059              		.loc 1 388 19 is_stmt 0 view .LVU264
 1060 0046 0023     		movs	r3, #0
 1061 0048 0293     		str	r3, [sp, #8]
 389:Core/Src/main.c ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 1062              		.loc 1 389 3 is_stmt 1 view .LVU265
 389:Core/Src/main.c ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 1063              		.loc 1 389 24 is_stmt 0 view .LVU266
 1064 004a 0393     		str	r3, [sp, #12]
 390:Core/Src/main.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 1065              		.loc 1 390 3 is_stmt 1 view .LVU267
 390:Core/Src/main.c ****   if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 1066              		.loc 1 390 24 is_stmt 0 view .LVU268
 1067 004c 0593     		str	r3, [sp, #20]
 391:Core/Src/main.c ****   {
 1068              		.loc 1 391 3 is_stmt 1 view .LVU269
 391:Core/Src/main.c ****   {
 1069              		.loc 1 391 7 is_stmt 0 view .LVU270
 1070 004e 0422     		movs	r2, #4
 1071 0050 0DEB0201 		add	r1, sp, r2
 1072 0054 0F48     		ldr	r0, .L68
 1073 0056 FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 1074              	.LVL72:
 391:Core/Src/main.c ****   {
 1075              		.loc 1 391 6 discriminator 1 view .LVU271
 1076 005a A8B9     		cbnz	r0, .L65
 395:Core/Src/main.c ****   {
 1077              		.loc 1 395 3 is_stmt 1 view .LVU272
 395:Core/Src/main.c ****   {
 1078              		.loc 1 395 7 is_stmt 0 view .LVU273
 1079 005c 0822     		movs	r2, #8
 1080 005e 01A9     		add	r1, sp, #4
 1081 0060 0C48     		ldr	r0, .L68
 1082 0062 FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 1083              	.LVL73:
 395:Core/Src/main.c ****   {
ARM GAS  /tmp/ccpnyFe8.s 			page 51


 1084              		.loc 1 395 6 discriminator 1 view .LVU274
 1085 0066 88B9     		cbnz	r0, .L66
 399:Core/Src/main.c ****   {
 1086              		.loc 1 399 3 is_stmt 1 view .LVU275
 399:Core/Src/main.c ****   {
 1087              		.loc 1 399 7 is_stmt 0 view .LVU276
 1088 0068 0C22     		movs	r2, #12
 1089 006a 01A9     		add	r1, sp, #4
 1090 006c 0948     		ldr	r0, .L68
 1091 006e FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 1092              	.LVL74:
 399:Core/Src/main.c ****   {
 1093              		.loc 1 399 6 discriminator 1 view .LVU277
 1094 0072 68B9     		cbnz	r0, .L67
 406:Core/Src/main.c **** 
 1095              		.loc 1 406 3 is_stmt 1 view .LVU278
 1096 0074 0748     		ldr	r0, .L68
 1097 0076 FFF7FEFF 		bl	HAL_TIM_MspPostInit
 1098              	.LVL75:
 408:Core/Src/main.c **** 
 1099              		.loc 1 408 1 is_stmt 0 view .LVU279
 1100 007a 0BB0     		add	sp, sp, #44
 1101              	.LCFI11:
 1102              		.cfi_remember_state
 1103              		.cfi_def_cfa_offset 4
 1104              		@ sp needed
 1105 007c 5DF804FB 		ldr	pc, [sp], #4
 1106              	.L63:
 1107              	.LCFI12:
 1108              		.cfi_restore_state
 379:Core/Src/main.c ****   }
 1109              		.loc 1 379 5 is_stmt 1 view .LVU280
 1110 0080 FFF7FEFF 		bl	Error_Handler
 1111              	.LVL76:
 1112              	.L64:
 385:Core/Src/main.c ****   }
 1113              		.loc 1 385 5 view .LVU281
 1114 0084 FFF7FEFF 		bl	Error_Handler
 1115              	.LVL77:
 1116              	.L65:
 393:Core/Src/main.c ****   }
 1117              		.loc 1 393 5 view .LVU282
 1118 0088 FFF7FEFF 		bl	Error_Handler
 1119              	.LVL78:
 1120              	.L66:
 397:Core/Src/main.c ****   }
 1121              		.loc 1 397 5 view .LVU283
 1122 008c FFF7FEFF 		bl	Error_Handler
 1123              	.LVL79:
 1124              	.L67:
 401:Core/Src/main.c ****   }
 1125              		.loc 1 401 5 view .LVU284
 1126 0090 FFF7FEFF 		bl	Error_Handler
 1127              	.LVL80:
 1128              	.L69:
 1129              		.align	2
 1130              	.L68:
ARM GAS  /tmp/ccpnyFe8.s 			page 52


 1131 0094 00000000 		.word	htim4
 1132 0098 00080040 		.word	1073743872
 1133              		.cfi_endproc
 1134              	.LFE138:
 1136              		.section	.text.MX_USART6_UART_Init,"ax",%progbits
 1137              		.align	1
 1138              		.syntax unified
 1139              		.thumb
 1140              		.thumb_func
 1142              	MX_USART6_UART_Init:
 1143              	.LFB140:
 454:Core/Src/main.c **** 
 1144              		.loc 1 454 1 view -0
 1145              		.cfi_startproc
 1146              		@ args = 0, pretend = 0, frame = 0
 1147              		@ frame_needed = 0, uses_anonymous_args = 0
 1148 0000 08B5     		push	{r3, lr}
 1149              	.LCFI13:
 1150              		.cfi_def_cfa_offset 8
 1151              		.cfi_offset 3, -8
 1152              		.cfi_offset 14, -4
 463:Core/Src/main.c ****   huart6.Init.BaudRate = 115200;
 1153              		.loc 1 463 3 view .LVU286
 463:Core/Src/main.c ****   huart6.Init.BaudRate = 115200;
 1154              		.loc 1 463 19 is_stmt 0 view .LVU287
 1155 0002 0A48     		ldr	r0, .L74
 1156 0004 0A4B     		ldr	r3, .L74+4
 1157 0006 0360     		str	r3, [r0]
 464:Core/Src/main.c ****   huart6.Init.WordLength = UART_WORDLENGTH_8B;
 1158              		.loc 1 464 3 is_stmt 1 view .LVU288
 464:Core/Src/main.c ****   huart6.Init.WordLength = UART_WORDLENGTH_8B;
 1159              		.loc 1 464 24 is_stmt 0 view .LVU289
 1160 0008 4FF4E133 		mov	r3, #115200
 1161 000c 4360     		str	r3, [r0, #4]
 465:Core/Src/main.c ****   huart6.Init.StopBits = UART_STOPBITS_1;
 1162              		.loc 1 465 3 is_stmt 1 view .LVU290
 465:Core/Src/main.c ****   huart6.Init.StopBits = UART_STOPBITS_1;
 1163              		.loc 1 465 26 is_stmt 0 view .LVU291
 1164 000e 0023     		movs	r3, #0
 1165 0010 8360     		str	r3, [r0, #8]
 466:Core/Src/main.c ****   huart6.Init.Parity = UART_PARITY_NONE;
 1166              		.loc 1 466 3 is_stmt 1 view .LVU292
 466:Core/Src/main.c ****   huart6.Init.Parity = UART_PARITY_NONE;
 1167              		.loc 1 466 24 is_stmt 0 view .LVU293
 1168 0012 C360     		str	r3, [r0, #12]
 467:Core/Src/main.c ****   huart6.Init.Mode = UART_MODE_TX_RX;
 1169              		.loc 1 467 3 is_stmt 1 view .LVU294
 467:Core/Src/main.c ****   huart6.Init.Mode = UART_MODE_TX_RX;
 1170              		.loc 1 467 22 is_stmt 0 view .LVU295
 1171 0014 0361     		str	r3, [r0, #16]
 468:Core/Src/main.c ****   huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 1172              		.loc 1 468 3 is_stmt 1 view .LVU296
 468:Core/Src/main.c ****   huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 1173              		.loc 1 468 20 is_stmt 0 view .LVU297
 1174 0016 0C22     		movs	r2, #12
 1175 0018 4261     		str	r2, [r0, #20]
 469:Core/Src/main.c ****   huart6.Init.OverSampling = UART_OVERSAMPLING_16;
ARM GAS  /tmp/ccpnyFe8.s 			page 53


 1176              		.loc 1 469 3 is_stmt 1 view .LVU298
 469:Core/Src/main.c ****   huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 1177              		.loc 1 469 25 is_stmt 0 view .LVU299
 1178 001a 8361     		str	r3, [r0, #24]
 470:Core/Src/main.c ****   if (HAL_UART_Init(&huart6) != HAL_OK)
 1179              		.loc 1 470 3 is_stmt 1 view .LVU300
 470:Core/Src/main.c ****   if (HAL_UART_Init(&huart6) != HAL_OK)
 1180              		.loc 1 470 28 is_stmt 0 view .LVU301
 1181 001c C361     		str	r3, [r0, #28]
 471:Core/Src/main.c ****   {
 1182              		.loc 1 471 3 is_stmt 1 view .LVU302
 471:Core/Src/main.c ****   {
 1183              		.loc 1 471 7 is_stmt 0 view .LVU303
 1184 001e FFF7FEFF 		bl	HAL_UART_Init
 1185              	.LVL81:
 471:Core/Src/main.c ****   {
 1186              		.loc 1 471 6 discriminator 1 view .LVU304
 1187 0022 00B9     		cbnz	r0, .L73
 479:Core/Src/main.c **** 
 1188              		.loc 1 479 1 view .LVU305
 1189 0024 08BD     		pop	{r3, pc}
 1190              	.L73:
 473:Core/Src/main.c ****   }
 1191              		.loc 1 473 5 is_stmt 1 view .LVU306
 1192 0026 FFF7FEFF 		bl	Error_Handler
 1193              	.LVL82:
 1194              	.L75:
 1195 002a 00BF     		.align	2
 1196              	.L74:
 1197 002c 00000000 		.word	huart6
 1198 0030 00140140 		.word	1073812480
 1199              		.cfi_endproc
 1200              	.LFE140:
 1202              		.section	.text.MX_TIM6_Init,"ax",%progbits
 1203              		.align	1
 1204              		.syntax unified
 1205              		.thumb
 1206              		.thumb_func
 1208              	MX_TIM6_Init:
 1209              	.LFB139:
 416:Core/Src/main.c **** 
 1210              		.loc 1 416 1 view -0
 1211              		.cfi_startproc
 1212              		@ args = 0, pretend = 0, frame = 8
 1213              		@ frame_needed = 0, uses_anonymous_args = 0
 1214 0000 00B5     		push	{lr}
 1215              	.LCFI14:
 1216              		.cfi_def_cfa_offset 4
 1217              		.cfi_offset 14, -4
 1218 0002 83B0     		sub	sp, sp, #12
 1219              	.LCFI15:
 1220              		.cfi_def_cfa_offset 16
 422:Core/Src/main.c **** 
 1221              		.loc 1 422 3 view .LVU308
 422:Core/Src/main.c **** 
 1222              		.loc 1 422 27 is_stmt 0 view .LVU309
 1223 0004 0023     		movs	r3, #0
ARM GAS  /tmp/ccpnyFe8.s 			page 54


 1224 0006 0093     		str	r3, [sp]
 1225 0008 0193     		str	r3, [sp, #4]
 427:Core/Src/main.c ****   htim6.Init.Prescaler = 999;
 1226              		.loc 1 427 3 is_stmt 1 view .LVU310
 427:Core/Src/main.c ****   htim6.Init.Prescaler = 999;
 1227              		.loc 1 427 18 is_stmt 0 view .LVU311
 1228 000a 0D48     		ldr	r0, .L82
 1229 000c 0D4A     		ldr	r2, .L82+4
 1230 000e 0260     		str	r2, [r0]
 428:Core/Src/main.c ****   htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 1231              		.loc 1 428 3 is_stmt 1 view .LVU312
 428:Core/Src/main.c ****   htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 1232              		.loc 1 428 24 is_stmt 0 view .LVU313
 1233 0010 40F2E732 		movw	r2, #999
 1234 0014 4260     		str	r2, [r0, #4]
 429:Core/Src/main.c ****   htim6.Init.Period = 999;
 1235              		.loc 1 429 3 is_stmt 1 view .LVU314
 429:Core/Src/main.c ****   htim6.Init.Period = 999;
 1236              		.loc 1 429 26 is_stmt 0 view .LVU315
 1237 0016 8360     		str	r3, [r0, #8]
 430:Core/Src/main.c ****   htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 1238              		.loc 1 430 3 is_stmt 1 view .LVU316
 430:Core/Src/main.c ****   htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 1239              		.loc 1 430 21 is_stmt 0 view .LVU317
 1240 0018 C260     		str	r2, [r0, #12]
 431:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 1241              		.loc 1 431 3 is_stmt 1 view .LVU318
 431:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 1242              		.loc 1 431 32 is_stmt 0 view .LVU319
 1243 001a 8361     		str	r3, [r0, #24]
 432:Core/Src/main.c ****   {
 1244              		.loc 1 432 3 is_stmt 1 view .LVU320
 432:Core/Src/main.c ****   {
 1245              		.loc 1 432 7 is_stmt 0 view .LVU321
 1246 001c FFF7FEFF 		bl	HAL_TIM_Base_Init
 1247              	.LVL83:
 432:Core/Src/main.c ****   {
 1248              		.loc 1 432 6 discriminator 1 view .LVU322
 1249 0020 50B9     		cbnz	r0, .L80
 436:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 1250              		.loc 1 436 3 is_stmt 1 view .LVU323
 436:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 1251              		.loc 1 436 37 is_stmt 0 view .LVU324
 1252 0022 0023     		movs	r3, #0
 1253 0024 0093     		str	r3, [sp]
 437:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 1254              		.loc 1 437 3 is_stmt 1 view .LVU325
 437:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 1255              		.loc 1 437 33 is_stmt 0 view .LVU326
 1256 0026 0193     		str	r3, [sp, #4]
 438:Core/Src/main.c ****   {
 1257              		.loc 1 438 3 is_stmt 1 view .LVU327
 438:Core/Src/main.c ****   {
 1258              		.loc 1 438 7 is_stmt 0 view .LVU328
 1259 0028 6946     		mov	r1, sp
 1260 002a 0548     		ldr	r0, .L82
 1261 002c FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
ARM GAS  /tmp/ccpnyFe8.s 			page 55


 1262              	.LVL84:
 438:Core/Src/main.c ****   {
 1263              		.loc 1 438 6 discriminator 1 view .LVU329
 1264 0030 20B9     		cbnz	r0, .L81
 446:Core/Src/main.c **** 
 1265              		.loc 1 446 1 view .LVU330
 1266 0032 03B0     		add	sp, sp, #12
 1267              	.LCFI16:
 1268              		.cfi_remember_state
 1269              		.cfi_def_cfa_offset 4
 1270              		@ sp needed
 1271 0034 5DF804FB 		ldr	pc, [sp], #4
 1272              	.L80:
 1273              	.LCFI17:
 1274              		.cfi_restore_state
 434:Core/Src/main.c ****   }
 1275              		.loc 1 434 5 is_stmt 1 view .LVU331
 1276 0038 FFF7FEFF 		bl	Error_Handler
 1277              	.LVL85:
 1278              	.L81:
 440:Core/Src/main.c ****   }
 1279              		.loc 1 440 5 view .LVU332
 1280 003c FFF7FEFF 		bl	Error_Handler
 1281              	.LVL86:
 1282              	.L83:
 1283              		.align	2
 1284              	.L82:
 1285 0040 00000000 		.word	htim6
 1286 0044 00100040 		.word	1073745920
 1287              		.cfi_endproc
 1288              	.LFE139:
 1290              		.section	.text.SystemClock_Config,"ax",%progbits
 1291              		.align	1
 1292              		.global	SystemClock_Config
 1293              		.syntax unified
 1294              		.thumb
 1295              		.thumb_func
 1297              	SystemClock_Config:
 1298              	.LFB137:
 306:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 1299              		.loc 1 306 1 view -0
 1300              		.cfi_startproc
 1301              		@ args = 0, pretend = 0, frame = 80
 1302              		@ frame_needed = 0, uses_anonymous_args = 0
 1303 0000 00B5     		push	{lr}
 1304              	.LCFI18:
 1305              		.cfi_def_cfa_offset 4
 1306              		.cfi_offset 14, -4
 1307 0002 95B0     		sub	sp, sp, #84
 1308              	.LCFI19:
 1309              		.cfi_def_cfa_offset 88
 307:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 1310              		.loc 1 307 3 view .LVU334
 307:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 1311              		.loc 1 307 22 is_stmt 0 view .LVU335
 1312 0004 3022     		movs	r2, #48
 1313 0006 0021     		movs	r1, #0
ARM GAS  /tmp/ccpnyFe8.s 			page 56


 1314 0008 08A8     		add	r0, sp, #32
 1315 000a FFF7FEFF 		bl	memset
 1316              	.LVL87:
 308:Core/Src/main.c **** 
 1317              		.loc 1 308 3 is_stmt 1 view .LVU336
 308:Core/Src/main.c **** 
 1318              		.loc 1 308 22 is_stmt 0 view .LVU337
 1319 000e 0023     		movs	r3, #0
 1320 0010 0393     		str	r3, [sp, #12]
 1321 0012 0493     		str	r3, [sp, #16]
 1322 0014 0593     		str	r3, [sp, #20]
 1323 0016 0693     		str	r3, [sp, #24]
 1324 0018 0793     		str	r3, [sp, #28]
 312:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 1325              		.loc 1 312 3 is_stmt 1 view .LVU338
 1326              	.LBB15:
 312:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 1327              		.loc 1 312 3 view .LVU339
 1328 001a 0193     		str	r3, [sp, #4]
 312:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 1329              		.loc 1 312 3 view .LVU340
 1330 001c 224A     		ldr	r2, .L92
 1331 001e 116C     		ldr	r1, [r2, #64]
 1332 0020 41F08051 		orr	r1, r1, #268435456
 1333 0024 1164     		str	r1, [r2, #64]
 312:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 1334              		.loc 1 312 3 view .LVU341
 1335 0026 126C     		ldr	r2, [r2, #64]
 1336 0028 02F08052 		and	r2, r2, #268435456
 1337 002c 0192     		str	r2, [sp, #4]
 312:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 1338              		.loc 1 312 3 view .LVU342
 1339 002e 019A     		ldr	r2, [sp, #4]
 1340              	.LBE15:
 312:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 1341              		.loc 1 312 3 view .LVU343
 313:Core/Src/main.c **** 
 1342              		.loc 1 313 3 view .LVU344
 1343              	.LBB16:
 313:Core/Src/main.c **** 
 1344              		.loc 1 313 3 view .LVU345
 1345 0030 0293     		str	r3, [sp, #8]
 313:Core/Src/main.c **** 
 1346              		.loc 1 313 3 view .LVU346
 1347 0032 1E4A     		ldr	r2, .L92+4
 1348 0034 1368     		ldr	r3, [r2]
 1349 0036 23F44043 		bic	r3, r3, #49152
 1350 003a 43F48043 		orr	r3, r3, #16384
 1351 003e 1360     		str	r3, [r2]
 313:Core/Src/main.c **** 
 1352              		.loc 1 313 3 view .LVU347
 1353 0040 1368     		ldr	r3, [r2]
 1354 0042 03F44043 		and	r3, r3, #49152
 1355 0046 0293     		str	r3, [sp, #8]
 313:Core/Src/main.c **** 
 1356              		.loc 1 313 3 view .LVU348
 1357 0048 029B     		ldr	r3, [sp, #8]
ARM GAS  /tmp/ccpnyFe8.s 			page 57


 1358              	.LBE16:
 313:Core/Src/main.c **** 
 1359              		.loc 1 313 3 view .LVU349
 318:Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 1360              		.loc 1 318 3 view .LVU350
 318:Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 1361              		.loc 1 318 36 is_stmt 0 view .LVU351
 1362 004a 0123     		movs	r3, #1
 1363 004c 0893     		str	r3, [sp, #32]
 319:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 1364              		.loc 1 319 3 is_stmt 1 view .LVU352
 319:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 1365              		.loc 1 319 30 is_stmt 0 view .LVU353
 1366 004e 4FF48033 		mov	r3, #65536
 1367 0052 0993     		str	r3, [sp, #36]
 320:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 1368              		.loc 1 320 3 is_stmt 1 view .LVU354
 320:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 1369              		.loc 1 320 34 is_stmt 0 view .LVU355
 1370 0054 0223     		movs	r3, #2
 1371 0056 0E93     		str	r3, [sp, #56]
 321:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 15;
 1372              		.loc 1 321 3 is_stmt 1 view .LVU356
 321:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 15;
 1373              		.loc 1 321 35 is_stmt 0 view .LVU357
 1374 0058 4FF48002 		mov	r2, #4194304
 1375 005c 0F92     		str	r2, [sp, #60]
 322:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 108;
 1376              		.loc 1 322 3 is_stmt 1 view .LVU358
 322:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 108;
 1377              		.loc 1 322 30 is_stmt 0 view .LVU359
 1378 005e 0F22     		movs	r2, #15
 1379 0060 1092     		str	r2, [sp, #64]
 323:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 1380              		.loc 1 323 3 is_stmt 1 view .LVU360
 323:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 1381              		.loc 1 323 30 is_stmt 0 view .LVU361
 1382 0062 6C22     		movs	r2, #108
 1383 0064 1192     		str	r2, [sp, #68]
 324:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 4;
 1384              		.loc 1 324 3 is_stmt 1 view .LVU362
 324:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 4;
 1385              		.loc 1 324 30 is_stmt 0 view .LVU363
 1386 0066 1293     		str	r3, [sp, #72]
 325:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 1387              		.loc 1 325 3 is_stmt 1 view .LVU364
 325:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 1388              		.loc 1 325 30 is_stmt 0 view .LVU365
 1389 0068 0423     		movs	r3, #4
 1390 006a 1393     		str	r3, [sp, #76]
 326:Core/Src/main.c ****   {
 1391              		.loc 1 326 3 is_stmt 1 view .LVU366
 326:Core/Src/main.c ****   {
 1392              		.loc 1 326 7 is_stmt 0 view .LVU367
 1393 006c 08A8     		add	r0, sp, #32
 1394 006e FFF7FEFF 		bl	HAL_RCC_OscConfig
 1395              	.LVL88:
ARM GAS  /tmp/ccpnyFe8.s 			page 58


 326:Core/Src/main.c ****   {
 1396              		.loc 1 326 6 discriminator 1 view .LVU368
 1397 0072 98B9     		cbnz	r0, .L89
 333:Core/Src/main.c ****   {
 1398              		.loc 1 333 3 is_stmt 1 view .LVU369
 333:Core/Src/main.c ****   {
 1399              		.loc 1 333 7 is_stmt 0 view .LVU370
 1400 0074 FFF7FEFF 		bl	HAL_PWREx_EnableOverDrive
 1401              	.LVL89:
 333:Core/Src/main.c ****   {
 1402              		.loc 1 333 6 discriminator 1 view .LVU371
 1403 0078 90B9     		cbnz	r0, .L90
 340:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 1404              		.loc 1 340 3 is_stmt 1 view .LVU372
 340:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 1405              		.loc 1 340 31 is_stmt 0 view .LVU373
 1406 007a 0F23     		movs	r3, #15
 1407 007c 0393     		str	r3, [sp, #12]
 342:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1408              		.loc 1 342 3 is_stmt 1 view .LVU374
 342:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1409              		.loc 1 342 34 is_stmt 0 view .LVU375
 1410 007e 0221     		movs	r1, #2
 1411 0080 0491     		str	r1, [sp, #16]
 343:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 1412              		.loc 1 343 3 is_stmt 1 view .LVU376
 343:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 1413              		.loc 1 343 35 is_stmt 0 view .LVU377
 1414 0082 0023     		movs	r3, #0
 1415 0084 0593     		str	r3, [sp, #20]
 344:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 1416              		.loc 1 344 3 is_stmt 1 view .LVU378
 344:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 1417              		.loc 1 344 36 is_stmt 0 view .LVU379
 1418 0086 4FF48053 		mov	r3, #4096
 1419 008a 0693     		str	r3, [sp, #24]
 345:Core/Src/main.c **** 
 1420              		.loc 1 345 3 is_stmt 1 view .LVU380
 345:Core/Src/main.c **** 
 1421              		.loc 1 345 36 is_stmt 0 view .LVU381
 1422 008c 0793     		str	r3, [sp, #28]
 347:Core/Src/main.c ****   {
 1423              		.loc 1 347 3 is_stmt 1 view .LVU382
 347:Core/Src/main.c ****   {
 1424              		.loc 1 347 7 is_stmt 0 view .LVU383
 1425 008e 03A8     		add	r0, sp, #12
 1426 0090 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 1427              	.LVL90:
 347:Core/Src/main.c ****   {
 1428              		.loc 1 347 6 discriminator 1 view .LVU384
 1429 0094 30B9     		cbnz	r0, .L91
 351:Core/Src/main.c **** 
 1430              		.loc 1 351 1 view .LVU385
 1431 0096 15B0     		add	sp, sp, #84
 1432              	.LCFI20:
 1433              		.cfi_remember_state
 1434              		.cfi_def_cfa_offset 4
ARM GAS  /tmp/ccpnyFe8.s 			page 59


 1435              		@ sp needed
 1436 0098 5DF804FB 		ldr	pc, [sp], #4
 1437              	.L89:
 1438              	.LCFI21:
 1439              		.cfi_restore_state
 328:Core/Src/main.c ****   }
 1440              		.loc 1 328 5 is_stmt 1 view .LVU386
 1441 009c FFF7FEFF 		bl	Error_Handler
 1442              	.LVL91:
 1443              	.L90:
 335:Core/Src/main.c ****   }
 1444              		.loc 1 335 5 view .LVU387
 1445 00a0 FFF7FEFF 		bl	Error_Handler
 1446              	.LVL92:
 1447              	.L91:
 349:Core/Src/main.c ****   }
 1448              		.loc 1 349 5 view .LVU388
 1449 00a4 FFF7FEFF 		bl	Error_Handler
 1450              	.LVL93:
 1451              	.L93:
 1452              		.align	2
 1453              	.L92:
 1454 00a8 00380240 		.word	1073887232
 1455 00ac 00700040 		.word	1073770496
 1456              		.cfi_endproc
 1457              	.LFE137:
 1459              		.section	.text.main,"ax",%progbits
 1460              		.align	1
 1461              		.global	main
 1462              		.syntax unified
 1463              		.thumb
 1464              		.thumb_func
 1466              	main:
 1467              	.LFB136:
 239:Core/Src/main.c **** 
 1468              		.loc 1 239 1 view -0
 1469              		.cfi_startproc
 1470              		@ Volatile: function does not return.
 1471              		@ args = 0, pretend = 0, frame = 0
 1472              		@ frame_needed = 0, uses_anonymous_args = 0
 1473 0000 08B5     		push	{r3, lr}
 1474              	.LCFI22:
 1475              		.cfi_def_cfa_offset 8
 1476              		.cfi_offset 3, -8
 1477              		.cfi_offset 14, -4
 248:Core/Src/main.c **** 
 1478              		.loc 1 248 3 view .LVU390
 1479 0002 FFF7FEFF 		bl	HAL_Init
 1480              	.LVL94:
 255:Core/Src/main.c **** 
 1481              		.loc 1 255 3 view .LVU391
 1482 0006 FFF7FEFF 		bl	SystemClock_Config
 1483              	.LVL95:
 262:Core/Src/main.c ****   MX_TIM4_Init();
 1484              		.loc 1 262 3 view .LVU392
 1485 000a FFF7FEFF 		bl	MX_GPIO_Init
 1486              	.LVL96:
ARM GAS  /tmp/ccpnyFe8.s 			page 60


 263:Core/Src/main.c ****   MX_USART6_UART_Init();
 1487              		.loc 1 263 3 view .LVU393
 1488 000e FFF7FEFF 		bl	MX_TIM4_Init
 1489              	.LVL97:
 264:Core/Src/main.c ****   MX_TIM6_Init();
 1490              		.loc 1 264 3 view .LVU394
 1491 0012 FFF7FEFF 		bl	MX_USART6_UART_Init
 1492              	.LVL98:
 265:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 1493              		.loc 1 265 3 view .LVU395
 1494 0016 FFF7FEFF 		bl	MX_TIM6_Init
 1495              	.LVL99:
 272:Core/Src/main.c ****   HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 1496              		.loc 1 272 3 view .LVU396
 1497 001a 2A48     		ldr	r0, .L100
 1498 001c FFF7FEFF 		bl	HAL_TIM_Base_Start_IT
 1499              	.LVL100:
 273:Core/Src/main.c ****   HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 1500              		.loc 1 273 3 view .LVU397
 1501 0020 294C     		ldr	r4, .L100+4
 1502 0022 0421     		movs	r1, #4
 1503 0024 2046     		mov	r0, r4
 1504 0026 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1505              	.LVL101:
 274:Core/Src/main.c ****   HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 1506              		.loc 1 274 3 view .LVU398
 1507 002a 0821     		movs	r1, #8
 1508 002c 2046     		mov	r0, r4
 1509 002e FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1510              	.LVL102:
 275:Core/Src/main.c **** 
 1511              		.loc 1 275 3 view .LVU399
 1512 0032 0C21     		movs	r1, #12
 1513 0034 2046     		mov	r0, r4
 1514 0036 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1515              	.LVL103:
 277:Core/Src/main.c ****   custom = modes[modes_length - 1];
 1516              		.loc 1 277 3 view .LVU400
 277:Core/Src/main.c ****   custom = modes[modes_length - 1];
 1517              		.loc 1 277 18 is_stmt 0 view .LVU401
 1518 003a 244B     		ldr	r3, .L100+8
 1519 003c 1C68     		ldr	r4, [r3]
 277:Core/Src/main.c ****   custom = modes[modes_length - 1];
 1520              		.loc 1 277 11 view .LVU402
 1521 003e 244D     		ldr	r5, .L100+12
 1522 0040 04EB4404 		add	r4, r4, r4, lsl #1
 1523 0044 234E     		ldr	r6, .L100+16
 1524 0046 05EBC404 		add	r4, r5, r4, lsl #3
 1525 004a 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 1526 004c 0FC6     		stmia	r6!, {r0, r1, r2, r3}
 1527 004e 94E80300 		ldm	r4, {r0, r1}
 1528 0052 86E80300 		stm	r6, {r0, r1}
 278:Core/Src/main.c **** 
 1529              		.loc 1 278 3 is_stmt 1 view .LVU403
 278:Core/Src/main.c **** 
 1530              		.loc 1 278 31 is_stmt 0 view .LVU404
 1531 0056 204B     		ldr	r3, .L100+20
ARM GAS  /tmp/ccpnyFe8.s 			page 61


 1532 0058 1B68     		ldr	r3, [r3]
 1533 005a 013B     		subs	r3, r3, #1
 278:Core/Src/main.c **** 
 1534              		.loc 1 278 10 view .LVU405
 1535 005c 03EB4303 		add	r3, r3, r3, lsl #1
 1536 0060 1E4E     		ldr	r6, .L100+24
 1537 0062 05EBC304 		add	r4, r5, r3, lsl #3
 1538 0066 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 1539 0068 0FC6     		stmia	r6!, {r0, r1, r2, r3}
 1540 006a 94E80300 		ldm	r4, {r0, r1}
 1541 006e 86E80300 		stm	r6, {r0, r1}
 1542 0072 0DE0     		b	.L95
 1543              	.L97:
 1544              	.LBB17:
 284:Core/Src/main.c ****           
 1545              		.loc 1 284 11 is_stmt 1 view .LVU406
 284:Core/Src/main.c ****           
 1546              		.loc 1 284 23 is_stmt 0 view .LVU407
 1547 0074 1A4E     		ldr	r6, .L100+28
 1548 0076 3388     		ldrh	r3, [r6]
 284:Core/Src/main.c ****           
 1549              		.loc 1 284 29 view .LVU408
 1550 0078 1A4C     		ldr	r4, .L100+32
 1551 007a 0025     		movs	r5, #0
 1552 007c E554     		strb	r5, [r4, r3]
 286:Core/Src/main.c **** 
 1553              		.loc 1 286 11 is_stmt 1 view .LVU409
 1554 007e 2046     		mov	r0, r4
 1555 0080 FFF7FEFF 		bl	Handler
 1556              	.LVL104:
 288:Core/Src/main.c ****           memset(receivedData, 0, BUFFER_SIZE);
 1557              		.loc 1 288 11 view .LVU410
 288:Core/Src/main.c ****           memset(receivedData, 0, BUFFER_SIZE);
 1558              		.loc 1 288 15 is_stmt 0 view .LVU411
 1559 0084 3580     		strh	r5, [r6]	@ movhi
 289:Core/Src/main.c ****       } else if (idx < BUFFER_SIZE - 1) {
 1560              		.loc 1 289 11 is_stmt 1 view .LVU412
 1561 0086 9622     		movs	r2, #150
 1562 0088 2946     		mov	r1, r5
 1563 008a 2046     		mov	r0, r4
 1564 008c FFF7FEFF 		bl	memset
 1565              	.LVL105:
 1566              	.L95:
 1567              	.LBE17:
 280:Core/Src/main.c ****   {
 1568              		.loc 1 280 3 view .LVU413
 282:Core/Src/main.c ****       if (byte == '\n' || byte == '\r') {
 1569              		.loc 1 282 5 view .LVU414
 282:Core/Src/main.c ****       if (byte == '\n' || byte == '\r') {
 1570              		.loc 1 282 9 is_stmt 0 view .LVU415
 1571 0090 4FF0FF33 		mov	r3, #-1
 1572 0094 0122     		movs	r2, #1
 1573 0096 1449     		ldr	r1, .L100+36
 1574 0098 1448     		ldr	r0, .L100+40
 1575 009a FFF7FEFF 		bl	HAL_UART_Receive
 1576              	.LVL106:
 282:Core/Src/main.c ****       if (byte == '\n' || byte == '\r') {
ARM GAS  /tmp/ccpnyFe8.s 			page 62


 1577              		.loc 1 282 8 discriminator 1 view .LVU416
 1578 009e 0028     		cmp	r0, #0
 1579 00a0 F6D1     		bne	.L95
 283:Core/Src/main.c ****           receivedData[idx] = '\0';
 1580              		.loc 1 283 7 is_stmt 1 view .LVU417
 283:Core/Src/main.c ****           receivedData[idx] = '\0';
 1581              		.loc 1 283 16 is_stmt 0 view .LVU418
 1582 00a2 114B     		ldr	r3, .L100+36
 1583 00a4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 283:Core/Src/main.c ****           receivedData[idx] = '\0';
 1584              		.loc 1 283 10 view .LVU419
 1585 00a6 0A2B     		cmp	r3, #10
 1586 00a8 E4D0     		beq	.L97
 283:Core/Src/main.c ****           receivedData[idx] = '\0';
 1587              		.loc 1 283 24 discriminator 1 view .LVU420
 1588 00aa 0D2B     		cmp	r3, #13
 1589 00ac E2D0     		beq	.L97
 290:Core/Src/main.c ****           receivedData[idx++] = byte;
 1590              		.loc 1 290 14 is_stmt 1 view .LVU421
 290:Core/Src/main.c ****           receivedData[idx++] = byte;
 1591              		.loc 1 290 22 is_stmt 0 view .LVU422
 1592 00ae 0C4A     		ldr	r2, .L100+28
 1593 00b0 1288     		ldrh	r2, [r2]
 290:Core/Src/main.c ****           receivedData[idx++] = byte;
 1594              		.loc 1 290 17 view .LVU423
 1595 00b2 942A     		cmp	r2, #148
 1596 00b4 ECD8     		bhi	.L95
 291:Core/Src/main.c ****       }
 1597              		.loc 1 291 11 is_stmt 1 view .LVU424
 291:Core/Src/main.c ****       }
 1598              		.loc 1 291 27 is_stmt 0 view .LVU425
 1599 00b6 501C     		adds	r0, r2, #1
 1600 00b8 0949     		ldr	r1, .L100+28
 1601 00ba 0880     		strh	r0, [r1]	@ movhi
 291:Core/Src/main.c ****       }
 1602              		.loc 1 291 31 view .LVU426
 1603 00bc 0949     		ldr	r1, .L100+32
 1604 00be 8B54     		strb	r3, [r1, r2]
 1605 00c0 E6E7     		b	.L95
 1606              	.L101:
 1607 00c2 00BF     		.align	2
 1608              	.L100:
 1609 00c4 00000000 		.word	htim6
 1610 00c8 00000000 		.word	htim4
 1611 00cc 00000000 		.word	mode_index
 1612 00d0 00000000 		.word	modes
 1613 00d4 00000000 		.word	current
 1614 00d8 00000000 		.word	modes_length
 1615 00dc 00000000 		.word	custom
 1616 00e0 00000000 		.word	idx
 1617 00e4 00000000 		.word	receivedData
 1618 00e8 00000000 		.word	byte
 1619 00ec 00000000 		.word	huart6
 1620              		.cfi_endproc
 1621              	.LFE136:
 1623              		.global	idx
 1624              		.section	.bss.idx,"aw",%nobits
ARM GAS  /tmp/ccpnyFe8.s 			page 63


 1625              		.align	1
 1628              	idx:
 1629 0000 0000     		.space	2
 1630              		.global	byte
 1631              		.section	.bss.byte,"aw",%nobits
 1634              	byte:
 1635 0000 00       		.space	1
 1636              		.global	receivedData
 1637              		.section	.bss.receivedData,"aw",%nobits
 1638              		.align	2
 1641              	receivedData:
 1642 0000 00000000 		.space	150
 1642      00000000 
 1642      00000000 
 1642      00000000 
 1642      00000000 
 1643              		.global	custom_mode_parameter_num
 1644              		.section	.bss.custom_mode_parameter_num,"aw",%nobits
 1645              		.align	2
 1648              	custom_mode_parameter_num:
 1649 0000 00000000 		.space	4
 1650              		.global	is_main_menu
 1651              		.section	.data.is_main_menu,"aw"
 1654              	is_main_menu:
 1655 0000 01       		.byte	1
 1656              		.global	speed
 1657              		.section	.data.speed,"aw"
 1658              		.align	2
 1661              	speed:
 1662 0000 05000000 		.word	5
 1663              		.global	custom
 1664              		.section	.bss.custom,"aw",%nobits
 1665              		.align	2
 1668              	custom:
 1669 0000 00000000 		.space	24
 1669      00000000 
 1669      00000000 
 1669      00000000 
 1669      00000000 
 1670              		.global	current
 1671              		.section	.bss.current,"aw",%nobits
 1672              		.align	2
 1675              	current:
 1676 0000 00000000 		.space	24
 1676      00000000 
 1676      00000000 
 1676      00000000 
 1676      00000000 
 1677              		.global	modes_length
 1678              		.section	.data.modes_length,"aw"
 1679              		.align	2
 1682              	modes_length:
 1683 0000 05000000 		.word	5
 1684              		.global	modes
 1685              		.section	.data.modes,"aw"
 1686              		.align	2
 1689              	modes:
ARM GAS  /tmp/ccpnyFe8.s 			page 64


 1690 0000 00000000 		.word	0
 1691 0004 C8000000 		.word	200
 1692 0008 64000000 		.word	100
 1693 000c C8000000 		.word	200
 1694 0010 00000000 		.word	0
 1695 0014 00000000 		.word	0
 1696 0018 00000000 		.word	0
 1697 001c 90010000 		.word	400
 1698 0020 00000000 		.word	0
 1699 0024 00000000 		.word	0
 1700 0028 C8000000 		.word	200
 1701 002c 90010000 		.word	400
 1702 0030 00000000 		.word	0
 1703 0034 58020000 		.word	600
 1704 0038 C8000000 		.word	200
 1705 003c 58020000 		.word	600
 1706 0040 90010000 		.word	400
 1707 0044 58020000 		.word	600
 1708 0048 00000000 		.word	0
 1709 004c C8000000 		.word	200
 1710 0050 00000000 		.word	0
 1711 0054 C8000000 		.word	200
 1712 0058 64000000 		.word	100
 1713 005c C8000000 		.word	200
 1714 0060 00000000 		.space	24
 1714      00000000 
 1714      00000000 
 1714      00000000 
 1714      00000000 
 1715              		.global	mode_index
 1716              		.section	.bss.mode_index,"aw",%nobits
 1717              		.align	2
 1720              	mode_index:
 1721 0000 00000000 		.space	4
 1722              		.global	huart6
 1723              		.section	.bss.huart6,"aw",%nobits
 1724              		.align	2
 1727              	huart6:
 1728 0000 00000000 		.space	72
 1728      00000000 
 1728      00000000 
 1728      00000000 
 1728      00000000 
 1729              		.global	htim6
 1730              		.section	.bss.htim6,"aw",%nobits
 1731              		.align	2
 1734              	htim6:
 1735 0000 00000000 		.space	72
 1735      00000000 
 1735      00000000 
 1735      00000000 
 1735      00000000 
 1736              		.global	htim4
 1737              		.section	.bss.htim4,"aw",%nobits
 1738              		.align	2
 1741              	htim4:
 1742 0000 00000000 		.space	72
ARM GAS  /tmp/ccpnyFe8.s 			page 65


 1742      00000000 
 1742      00000000 
 1742      00000000 
 1742      00000000 
 1743              		.text
 1744              	.Letext0:
 1745              		.file 3 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/machine/_default_types.h"
 1746              		.file 4 "/opt/gcc-arm-none-eabi/arm-none-eabi/include/sys/_stdint.h"
 1747              		.file 5 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f427xx.h"
 1748              		.file 6 "/opt/gcc-arm-none-eabi/lib/gcc/arm-none-eabi/13.3.1/include/stddef.h"
 1749              		.file 7 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 1750              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 1751              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 1752              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 1753              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim.h"
 1754              		.file 12 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_uart.h"
 1755              		.file 13 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim_ex.h"
 1756              		.file 14 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_pwr_ex.h"
 1757              		.file 15 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 1758              		.file 16 "Core/Inc/main.h"
 1759              		.file 17 "<built-in>"
ARM GAS  /tmp/ccpnyFe8.s 			page 66


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
     /tmp/ccpnyFe8.s:21     .text.MX_GPIO_Init:00000000 $t
     /tmp/ccpnyFe8.s:26     .text.MX_GPIO_Init:00000000 MX_GPIO_Init
     /tmp/ccpnyFe8.s:95     .text.MX_GPIO_Init:00000048 $d
     /tmp/ccpnyFe8.s:100    .text.HAL_TIM_PeriodElapsedCallback:00000000 $t
     /tmp/ccpnyFe8.s:106    .text.HAL_TIM_PeriodElapsedCallback:00000000 HAL_TIM_PeriodElapsedCallback
     /tmp/ccpnyFe8.s:260    .text.HAL_TIM_PeriodElapsedCallback:0000009c $d
     /tmp/ccpnyFe8.s:1675   .bss.current:00000000 current
     /tmp/ccpnyFe8.s:1661   .data.speed:00000000 speed
     /tmp/ccpnyFe8.s:1741   .bss.htim4:00000000 htim4
     /tmp/ccpnyFe8.s:268    .rodata.Handler.str1.4:00000000 $d
     /tmp/ccpnyFe8.s:305    .text.Handler:00000000 $t
     /tmp/ccpnyFe8.s:311    .text.Handler:00000000 Handler
     /tmp/ccpnyFe8.s:358    .text.Handler:00000024 $d
     /tmp/ccpnyFe8.s:365    .text.Handler:0000002a $t
     /tmp/ccpnyFe8.s:658    .text.Handler:00000192 $d
     /tmp/ccpnyFe8.s:850    .text.Handler:000002a0 $d
     /tmp/ccpnyFe8.s:1654   .data.is_main_menu:00000000 is_main_menu
     /tmp/ccpnyFe8.s:1648   .bss.custom_mode_parameter_num:00000000 custom_mode_parameter_num
     /tmp/ccpnyFe8.s:1727   .bss.huart6:00000000 huart6
     /tmp/ccpnyFe8.s:1720   .bss.mode_index:00000000 mode_index
     /tmp/ccpnyFe8.s:1682   .data.modes_length:00000000 modes_length
     /tmp/ccpnyFe8.s:1689   .data.modes:00000000 modes
     /tmp/ccpnyFe8.s:869    .text.Handler:000002e4 $t
     /tmp/ccpnyFe8.s:932    .text.Handler:00000344 $d
     /tmp/ccpnyFe8.s:1668   .bss.custom:00000000 custom
     /tmp/ccpnyFe8.s:941    .text.Error_Handler:00000000 $t
     /tmp/ccpnyFe8.s:947    .text.Error_Handler:00000000 Error_Handler
     /tmp/ccpnyFe8.s:979    .text.MX_TIM4_Init:00000000 $t
     /tmp/ccpnyFe8.s:984    .text.MX_TIM4_Init:00000000 MX_TIM4_Init
     /tmp/ccpnyFe8.s:1131   .text.MX_TIM4_Init:00000094 $d
     /tmp/ccpnyFe8.s:1137   .text.MX_USART6_UART_Init:00000000 $t
     /tmp/ccpnyFe8.s:1142   .text.MX_USART6_UART_Init:00000000 MX_USART6_UART_Init
     /tmp/ccpnyFe8.s:1197   .text.MX_USART6_UART_Init:0000002c $d
     /tmp/ccpnyFe8.s:1203   .text.MX_TIM6_Init:00000000 $t
     /tmp/ccpnyFe8.s:1208   .text.MX_TIM6_Init:00000000 MX_TIM6_Init
     /tmp/ccpnyFe8.s:1285   .text.MX_TIM6_Init:00000040 $d
     /tmp/ccpnyFe8.s:1734   .bss.htim6:00000000 htim6
     /tmp/ccpnyFe8.s:1291   .text.SystemClock_Config:00000000 $t
     /tmp/ccpnyFe8.s:1297   .text.SystemClock_Config:00000000 SystemClock_Config
     /tmp/ccpnyFe8.s:1454   .text.SystemClock_Config:000000a8 $d
     /tmp/ccpnyFe8.s:1460   .text.main:00000000 $t
     /tmp/ccpnyFe8.s:1466   .text.main:00000000 main
     /tmp/ccpnyFe8.s:1609   .text.main:000000c4 $d
     /tmp/ccpnyFe8.s:1628   .bss.idx:00000000 idx
     /tmp/ccpnyFe8.s:1641   .bss.receivedData:00000000 receivedData
     /tmp/ccpnyFe8.s:1634   .bss.byte:00000000 byte
     /tmp/ccpnyFe8.s:1625   .bss.idx:00000000 $d
     /tmp/ccpnyFe8.s:1635   .bss.byte:00000000 $d
     /tmp/ccpnyFe8.s:1638   .bss.receivedData:00000000 $d
     /tmp/ccpnyFe8.s:1645   .bss.custom_mode_parameter_num:00000000 $d
     /tmp/ccpnyFe8.s:1658   .data.speed:00000000 $d
     /tmp/ccpnyFe8.s:1665   .bss.custom:00000000 $d
     /tmp/ccpnyFe8.s:1672   .bss.current:00000000 $d
     /tmp/ccpnyFe8.s:1679   .data.modes_length:00000000 $d
     /tmp/ccpnyFe8.s:1686   .data.modes:00000000 $d
ARM GAS  /tmp/ccpnyFe8.s 			page 67


     /tmp/ccpnyFe8.s:1717   .bss.mode_index:00000000 $d
     /tmp/ccpnyFe8.s:1724   .bss.huart6:00000000 $d
     /tmp/ccpnyFe8.s:1731   .bss.htim6:00000000 $d
     /tmp/ccpnyFe8.s:1738   .bss.htim4:00000000 $d
     /tmp/ccpnyFe8.s:663    .text.Handler:00000197 $d
     /tmp/ccpnyFe8.s:663    .text.Handler:00000198 $t

UNDEFINED SYMBOLS
atoi
strlen
HAL_UART_Transmit
sprintf
HAL_TIM_PWM_Init
HAL_TIMEx_MasterConfigSynchronization
HAL_TIM_PWM_ConfigChannel
HAL_TIM_MspPostInit
HAL_UART_Init
HAL_TIM_Base_Init
memset
HAL_RCC_OscConfig
HAL_PWREx_EnableOverDrive
HAL_RCC_ClockConfig
HAL_Init
HAL_TIM_Base_Start_IT
HAL_TIM_PWM_Start
HAL_UART_Receive
